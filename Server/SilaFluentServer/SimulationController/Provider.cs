//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace Tecan.VisionX.Sila2
{
    
    
    ///  <summary>
    /// A class that exposes the ISimulationController interface via SiLA2
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IFeatureProvider))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class SimulationControllerProvider : IFeatureProvider
    {
        
        private ISimulationController _implementation;
        
        private Tecan.Sila2.Server.ISiLAServer _server;
        
        private static Tecan.Sila2.Feature _feature = FeatureSerializer.LoadFromAssembly(typeof(SimulationControllerProvider).Assembly, "SimulationController.sila.xml");
        
        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="implementation">The implementation to exported through SiLA2</param>
        /// <param name="server">The SiLA2 server instance through which the implementation shall be exported</param>
        [System.ComponentModel.Composition.ImportingConstructorAttribute()]
        public SimulationControllerProvider(ISimulationController implementation, Tecan.Sila2.Server.ISiLAServer server)
        {
            _implementation = implementation;
            _server = server;
        }
        
        ///  <summary>
        /// The feature that is exposed by this feature provider
        /// </summary>
        /// <returns>A feature object</returns>
        public Tecan.Sila2.Feature FeatureDefinition
        {
            get
            {
                return _feature;
            }
        }
        
        ///  <summary>
        /// Registers the feature in the provided feature registration
        /// </summary>
        /// <param name="registration">The registration component to which the feature should be registered</param>
        public void Register(IServerBuilder registration)
        {
            registration.RegisterUnobservableCommand<StartSimulationModeRequestDto, EmptyRequest>("StartSimulationMode", StartSimulationMode);
            registration.RegisterUnobservableCommand<StartRealModeRequestDto, EmptyRequest>("StartRealMode", StartRealMode);
            registration.RegisterUnobservableProperty("SimulationMode", GetSimulationMode);
        }
        
        ///  <summary>
        /// Executes the Start Simulation Mode command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StartSimulationMode(StartSimulationModeRequestDto request)
        {
            try
            {
                _implementation.StartSimulationMode();
                return EmptyRequest.Instance;
            } catch (StartSimulationModeFailedException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("org.silastandard/core/SimulationController/v1/DefinedError/StartSimulationModeFai" +
                        "led", "\n      The server cannot change to Simulation Mode.\n      This error can, e.g., b" +
                        "e thrown, if a real-world process needs to be ended before switching to simulati" +
                        "on\n      mode.\n    ", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Start Real Mode command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StartRealMode(StartRealModeRequestDto request)
        {
            try
            {
                _implementation.StartRealMode();
                return EmptyRequest.Instance;
            } catch (StartRealModeFailedException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("org.silastandard/core/SimulationController/v1/DefinedError/StartRealModeFailed", "\n      The server cannot change to Real Mode.\n      This error can, e.g., be thro" +
                        "wn, if a device is not ready to change into Real Mode.\n    ", ex.Message);
            }
        }
        
        ///  <summary>
        /// Gets the current value of the SimulationMode property
        /// </summary>
        /// <returns>The current value wrapped in a data transfer object</returns>
        protected virtual PropertyResponse<Tecan.Sila2.BooleanDto> GetSimulationMode()
        {
            return new PropertyResponse<Tecan.Sila2.BooleanDto>(new Tecan.Sila2.BooleanDto(_implementation.SimulationMode, _server));
        }
        
        ///  <summary>
        /// Gets the command with the given identifier
        /// </summary>
        /// <param name="commandIdentifier">A fully qualified command identifier</param>
        /// <returns>A method object or null, if the command is not supported</returns>
        public System.Reflection.MethodInfo GetCommand(string commandIdentifier)
        {
            if ((commandIdentifier == "org.silastandard/core/SimulationController/v1/Command/StartSimulationMode"))
            {
                return typeof(ISimulationController).GetMethod("StartSimulationMode");
            }
            if ((commandIdentifier == "org.silastandard/core/SimulationController/v1/Command/StartRealMode"))
            {
                return typeof(ISimulationController).GetMethod("StartRealMode");
            }
            return null;
        }
        
        ///  <summary>
        /// Gets the property with the given identifier
        /// </summary>
        /// <param name="propertyIdentifier">A fully qualified property identifier</param>
        /// <returns>A property object or null, if the property is not supported</returns>
        public System.Reflection.PropertyInfo GetProperty(string propertyIdentifier)
        {
            if ((propertyIdentifier == "org.silastandard/core/SimulationController/v1/Property/SimulationMode"))
            {
                return typeof(ISimulationController).GetProperty("SimulationMode");
            }
            return null;
        }
    }
}

