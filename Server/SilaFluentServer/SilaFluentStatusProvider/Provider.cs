//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;
using Tecan.VisionX.Sila2;

namespace Tecan.VisionX.Sila2.SilaFluentStatusProvider
{
    
    
    ///  <summary>
    /// A class that exposes the ISilaFluentStatusProvider interface via SiLA2
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IFeatureProvider))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class SilaFluentStatusProviderProvider : IFeatureProvider
    {
        
        private ISilaFluentStatusProvider _implementation;
        
        private Tecan.Sila2.Server.ISiLAServer _server;
        
        private static Tecan.Sila2.Feature _feature = FeatureSerializer.LoadFromAssembly(typeof(SilaFluentStatusProviderProvider).Assembly, "SilaFluentStatusProvider.sila.xml");
        
        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="implementation">The implementation to exported through SiLA2</param>
        /// <param name="server">The SiLA2 server instance through which the implementation shall be exported</param>
        [System.ComponentModel.Composition.ImportingConstructorAttribute()]
        public SilaFluentStatusProviderProvider(ISilaFluentStatusProvider implementation, Tecan.Sila2.Server.ISiLAServer server)
        {
            _implementation = implementation;
            _server = server;
        }
        
        ///  <summary>
        /// The feature that is exposed by this feature provider
        /// </summary>
        /// <returns>A feature object</returns>
        public Tecan.Sila2.Feature FeatureDefinition
        {
            get
            {
                return _feature;
            }
        }
        
        ///  <summary>
        /// Registers the feature in the provided feature registration
        /// </summary>
        /// <param name="registration">The registration component to which the feature should be registered</param>
        public void Register(IServerBuilder registration)
        {
            registration.RegisterObservableProperty("State", GetState, _implementation);
            registration.RegisterObservableProperty("Progress", GetProgress, _implementation);
            registration.RegisterObservableProperty("LastError", GetLastError, _implementation);
        }
        
        ///  <summary>
        /// Gets the current value of the State property
        /// </summary>
        /// <returns>The current value wrapped in a data transfer object</returns>
        protected virtual PropertyResponse<FluentControlStateDto> GetState()
        {
            return new PropertyResponse<FluentControlStateDto>(new FluentControlStateDto(_implementation.State, _server));
        }
        
        ///  <summary>
        /// Gets the current value of the Progress property
        /// </summary>
        /// <returns>The current value wrapped in a data transfer object</returns>
        protected virtual PropertyResponse<Tecan.Sila2.IntegerDto> GetProgress()
        {
            return new PropertyResponse<Tecan.Sila2.IntegerDto>(new Tecan.Sila2.IntegerDto(_implementation.Progress, _server));
        }
        
        ///  <summary>
        /// Gets the current value of the Last Error property
        /// </summary>
        /// <returns>The current value wrapped in a data transfer object</returns>
        protected virtual PropertyResponse<Tecan.Sila2.StringDto> GetLastError()
        {
            return new PropertyResponse<Tecan.Sila2.StringDto>(new Tecan.Sila2.StringDto(_implementation.LastError, _server));
        }
        
        ///  <summary>
        /// Gets the command with the given identifier
        /// </summary>
        /// <param name="commandIdentifier">A fully qualified command identifier</param>
        /// <returns>A method object or null, if the command is not supported</returns>
        public System.Reflection.MethodInfo GetCommand(string commandIdentifier)
        {
            return null;
        }
        
        ///  <summary>
        /// Gets the property with the given identifier
        /// </summary>
        /// <param name="propertyIdentifier">A fully qualified property identifier</param>
        /// <returns>A property object or null, if the property is not supported</returns>
        public System.Reflection.PropertyInfo GetProperty(string propertyIdentifier)
        {
            if ((propertyIdentifier == "tecan/fluent/SilaFluentStatusProvider/v1/Property/State"))
            {
                return typeof(ISilaFluentStatusProvider).GetProperty("State");
            }
            if ((propertyIdentifier == "tecan/fluent/SilaFluentStatusProvider/v1/Property/Progress"))
            {
                return typeof(ISilaFluentStatusProvider).GetProperty("Progress");
            }
            if ((propertyIdentifier == "tecan/fluent/SilaFluentStatusProvider/v1/Property/LastError"))
            {
                return typeof(ISilaFluentStatusProvider).GetProperty("LastError");
            }
            return null;
        }
    }
}


