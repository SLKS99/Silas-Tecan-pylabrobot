//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Tecan.VisionX.Sila2;

namespace Tecan.VisionX.Sila2
{
    using Tecan.Sila2;
    
    
    ///  <summary>
    /// Data transfer object for the request of the Add Labware command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AddLabwareRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _barcode;
        
        private Tecan.Sila2.BooleanDto _hasLid;
        
        private Tecan.Sila2.StringDto _labwareName;
        
        private Tecan.Sila2.StringDto _labwareType;
        
        private Tecan.Sila2.StringDto _targetLocation;
        
        private Tecan.Sila2.IntegerDto _position;
        
        private Tecan.Sila2.IntegerDto _rotation;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public AddLabwareRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="barcode">the barcode of the labware</param>
        ///  <param name="hasLid">True, if the labware has a lid</param>
        ///  <param name="labwareName">the name of the labware</param>
        ///  <param name="labwareType">the type of the labware</param>
        ///  <param name="targetLocation">the location where the labware should be spawned</param>
        ///  <param name="position">the position in the target location group</param>
        ///  <param name="rotation">the rotation of the labware</param>
        public AddLabwareRequestDto(string barcode, bool hasLid, string labwareName, string labwareType, string targetLocation, int position, int rotation, Tecan.Sila2.IBinaryStore store)
        {
            Barcode = new Tecan.Sila2.StringDto(barcode, store);
            HasLid = new Tecan.Sila2.BooleanDto(hasLid, store);
            LabwareName = new Tecan.Sila2.StringDto(labwareName, store);
            LabwareType = new Tecan.Sila2.StringDto(labwareType, store);
            TargetLocation = new Tecan.Sila2.StringDto(targetLocation, store);
            Position = new Tecan.Sila2.IntegerDto(position, store);
            Rotation = new Tecan.Sila2.IntegerDto(rotation, store);
        }
        
        ///  <summary>
        /// the barcode of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Barcode
        {
            get
            {
                return _barcode;
            }
            set
            {
                _barcode = value;
            }
        }
        
        ///  <summary>
        /// True, if the labware has a lid
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.BooleanDto HasLid
        {
            get
            {
                return _hasLid;
            }
            set
            {
                _hasLid = value;
            }
        }
        
        ///  <summary>
        /// the name of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto LabwareName
        {
            get
            {
                return _labwareName;
            }
            set
            {
                _labwareName = value;
            }
        }
        
        ///  <summary>
        /// the type of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(4)]
        public Tecan.Sila2.StringDto LabwareType
        {
            get
            {
                return _labwareType;
            }
            set
            {
                _labwareType = value;
            }
        }
        
        ///  <summary>
        /// the location where the labware should be spawned
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(5)]
        public Tecan.Sila2.StringDto TargetLocation
        {
            get
            {
                return _targetLocation;
            }
            set
            {
                _targetLocation = value;
            }
        }
        
        ///  <summary>
        /// the position in the target location group
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(6)]
        public Tecan.Sila2.IntegerDto Position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
        
        ///  <summary>
        /// the rotation of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(7)]
        public Tecan.Sila2.IntegerDto Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/AddLabware";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Remove Labware command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class RemoveLabwareRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _labwareName;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public RemoveLabwareRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="labwareName">the name of the labware</param>
        public RemoveLabwareRequestDto(string labwareName, Tecan.Sila2.IBinaryStore store)
        {
            LabwareName = new Tecan.Sila2.StringDto(labwareName, store);
        }
        
        ///  <summary>
        /// the name of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto LabwareName
        {
            get
            {
                return _labwareName;
            }
            set
            {
                _labwareName = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/RemoveLabware";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Set Location command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class SetLocationRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _labware;
        
        private Tecan.Sila2.IntegerDto _rotation;
        
        private Tecan.Sila2.StringDto _targetLocation;
        
        private Tecan.Sila2.IntegerDto _targetSite;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public SetLocationRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="labware">the name of the labware</param>
        ///  <param name="rotation">the new rotation of the labware</param>
        ///  <param name="targetLocation">the target location group name</param>
        ///  <param name="targetSite">the target site</param>
        public SetLocationRequestDto(string labware, int rotation, string targetLocation, int targetSite, Tecan.Sila2.IBinaryStore store)
        {
            Labware = new Tecan.Sila2.StringDto(labware, store);
            Rotation = new Tecan.Sila2.IntegerDto(rotation, store);
            TargetLocation = new Tecan.Sila2.StringDto(targetLocation, store);
            TargetSite = new Tecan.Sila2.IntegerDto(targetSite, store);
        }
        
        ///  <summary>
        /// the name of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Labware
        {
            get
            {
                return _labware;
            }
            set
            {
                _labware = value;
            }
        }
        
        ///  <summary>
        /// the new rotation of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.IntegerDto Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
        
        ///  <summary>
        /// the target location group name
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto TargetLocation
        {
            get
            {
                return _targetLocation;
            }
            set
            {
                _targetLocation = value;
            }
        }
        
        ///  <summary>
        /// the target site
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(4)]
        public Tecan.Sila2.IntegerDto TargetSite
        {
            get
            {
                return _targetSite;
            }
            set
            {
                _targetSite = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/SetLocation";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Subroutine command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class SubroutineRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _subroutineName;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public SubroutineRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="subroutineName">the name of the subroutine</param>
        public SubroutineRequestDto(string subroutineName, Tecan.Sila2.IBinaryStore store)
        {
            SubroutineName = new Tecan.Sila2.StringDto(subroutineName, store);
        }
        
        ///  <summary>
        /// the name of the subroutine
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto SubroutineName
        {
            get
            {
                return _subroutineName;
            }
            set
            {
                _subroutineName = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/Subroutine";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Transfer Labware command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class TransferLabwareRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _labwareToLocation;
        
        private Tecan.Sila2.BooleanDto _onlyUseSelectedSite;
        
        private Tecan.Sila2.StringDto _targetLocation;
        
        private Tecan.Sila2.IntegerDto _targetPosition;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public TransferLabwareRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="labwareToLocation">the labware that should be moved</param>
        ///  <param name="onlyUseSelectedSite">True, if the instrument should only use the exact target position, otherwise False</param>
        ///  <param name="targetLocation">the target location group</param>
        ///  <param name="targetPosition">the target position</param>
        public TransferLabwareRequestDto(string labwareToLocation, bool onlyUseSelectedSite, string targetLocation, int targetPosition, Tecan.Sila2.IBinaryStore store)
        {
            LabwareToLocation = new Tecan.Sila2.StringDto(labwareToLocation, store);
            OnlyUseSelectedSite = new Tecan.Sila2.BooleanDto(onlyUseSelectedSite, store);
            TargetLocation = new Tecan.Sila2.StringDto(targetLocation, store);
            TargetPosition = new Tecan.Sila2.IntegerDto(targetPosition, store);
        }
        
        ///  <summary>
        /// the labware that should be moved
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto LabwareToLocation
        {
            get
            {
                return _labwareToLocation;
            }
            set
            {
                _labwareToLocation = value;
            }
        }
        
        ///  <summary>
        /// True, if the instrument should only use the exact target position, otherwise False
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.BooleanDto OnlyUseSelectedSite
        {
            get
            {
                return _onlyUseSelectedSite;
            }
            set
            {
                _onlyUseSelectedSite = value;
            }
        }
        
        ///  <summary>
        /// the target location group
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto TargetLocation
        {
            get
            {
                return _targetLocation;
            }
            set
            {
                _targetLocation = value;
            }
        }
        
        ///  <summary>
        /// the target position
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(4)]
        public Tecan.Sila2.IntegerDto TargetPosition
        {
            get
            {
                return _targetPosition;
            }
            set
            {
                _targetPosition = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/TransferLabware";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Transfer Labware Back To Base command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class TransferLabwareBackToBaseRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _labwareName;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public TransferLabwareBackToBaseRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="labwareName">the name of the labware</param>
        public TransferLabwareBackToBaseRequestDto(string labwareName, Tecan.Sila2.IBinaryStore store)
        {
            LabwareName = new Tecan.Sila2.StringDto(labwareName, store);
        }
        
        ///  <summary>
        /// the name of the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto LabwareName
        {
            get
            {
                return _labwareName;
            }
            set
            {
                _labwareName = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/TransferLabwareBackToBase";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Generic Command command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GenericCommandRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _content;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GenericCommandRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="content">the XML representation of the command</param>
        public GenericCommandRequestDto(string content, Tecan.Sila2.IBinaryStore store)
        {
            Content = new Tecan.Sila2.StringDto(content, store);
        }
        
        ///  <summary>
        /// the XML representation of the command
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Content
        {
            get
            {
                return _content;
            }
            set
            {
                _content = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GenericCommand";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Get Fingers command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetFingersRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _deviceAlias;
        
        private Tecan.Sila2.StringDto _gripperFingers;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetFingersRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="deviceAlias">the alias of the RGA</param>
        ///  <param name="gripperFingers">the gripper fingers</param>
        public GetFingersRequestDto(string deviceAlias, string gripperFingers, Tecan.Sila2.IBinaryStore store)
        {
            DeviceAlias = new Tecan.Sila2.StringDto(deviceAlias, store);
            GripperFingers = new Tecan.Sila2.StringDto(gripperFingers, store);
        }
        
        ///  <summary>
        /// the alias of the RGA
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto DeviceAlias
        {
            get
            {
                return _deviceAlias;
            }
            set
            {
                _deviceAlias = value;
            }
        }
        
        ///  <summary>
        /// the gripper fingers
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto GripperFingers
        {
            get
            {
                return _gripperFingers;
            }
            set
            {
                _gripperFingers = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GetFingers";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Drop Fingers command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class DropFingersRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _deviceAlias;
        
        private Tecan.Sila2.StringDto _dockingStation;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public DropFingersRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="deviceAlias">the alias of the RGA</param>
        ///  <param name="dockingStation">the docking station</param>
        public DropFingersRequestDto(string deviceAlias, string dockingStation, Tecan.Sila2.IBinaryStore store)
        {
            DeviceAlias = new Tecan.Sila2.StringDto(deviceAlias, store);
            DockingStation = new Tecan.Sila2.StringDto(dockingStation, store);
        }
        
        ///  <summary>
        /// the alias of the RGA
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto DeviceAlias
        {
            get
            {
                return _deviceAlias;
            }
            set
            {
                _deviceAlias = value;
            }
        }
        
        ///  <summary>
        /// the docking station
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto DockingStation
        {
            get
            {
                return _dockingStation;
            }
            set
            {
                _dockingStation = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/DropFingers";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the User Prompt command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class UserPromptRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _text;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public UserPromptRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="text">the text to display to the user</param>
        public UserPromptRequestDto(string text, Tecan.Sila2.IBinaryStore store)
        {
            Text = new Tecan.Sila2.StringDto(text, store);
        }
        
        ///  <summary>
        /// the text to display to the user
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/UserPrompt";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Get Tips command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetTipsRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.IntegerDto _airgapVolume;
        
        private Tecan.Sila2.IntegerDto _airgapSpeed;
        
        private Tecan.Sila2.StringDto _diTiType;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetTipsRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="airgapVolume">the airgap volume</param>
        ///  <param name="airgapSpeed">the airgap speed</param>
        ///  <param name="diTiType">the type of disposable tips</param>
        public GetTipsRequestDto(int airgapVolume, int airgapSpeed, string diTiType, Tecan.Sila2.IBinaryStore store)
        {
            AirgapVolume = new Tecan.Sila2.IntegerDto(airgapVolume, store);
            AirgapSpeed = new Tecan.Sila2.IntegerDto(airgapSpeed, store);
            DiTiType = new Tecan.Sila2.StringDto(diTiType, store);
        }
        
        ///  <summary>
        /// the airgap volume
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.IntegerDto AirgapVolume
        {
            get
            {
                return _airgapVolume;
            }
            set
            {
                _airgapVolume = value;
            }
        }
        
        ///  <summary>
        /// the airgap speed
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.IntegerDto AirgapSpeed
        {
            get
            {
                return _airgapSpeed;
            }
            set
            {
                _airgapSpeed = value;
            }
        }
        
        ///  <summary>
        /// the type of disposable tips
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto DiTiType
        {
            get
            {
                return _diTiType;
            }
            set
            {
                _diTiType = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GetTips";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Aspirate command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AspirateRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.IntegerDto _volume;
        
        private Tecan.Sila2.StringDto _labware;
        
        private Tecan.Sila2.StringDto _liquidClass;
        
        private Tecan.Sila2.IntegerDto _wellOffset;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public AspirateRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="volume">the volume that should be aspirated</param>
        ///  <param name="labware">the labware from which should be aspirated</param>
        ///  <param name="liquidClass">the name of the liquid class used for aspiration</param>
        ///  <param name="wellOffset">the well offset</param>
        public AspirateRequestDto(int volume, string labware, string liquidClass, int wellOffset, Tecan.Sila2.IBinaryStore store)
        {
            Volume = new Tecan.Sila2.IntegerDto(volume, store);
            Labware = new Tecan.Sila2.StringDto(labware, store);
            LiquidClass = new Tecan.Sila2.StringDto(liquidClass, store);
            WellOffset = new Tecan.Sila2.IntegerDto(wellOffset, store);
        }
        
        ///  <summary>
        /// the volume that should be aspirated
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.IntegerDto Volume
        {
            get
            {
                return _volume;
            }
            set
            {
                _volume = value;
            }
        }
        
        ///  <summary>
        /// the labware from which should be aspirated
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto Labware
        {
            get
            {
                return _labware;
            }
            set
            {
                _labware = value;
            }
        }
        
        ///  <summary>
        /// the name of the liquid class used for aspiration
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto LiquidClass
        {
            get
            {
                return _liquidClass;
            }
            set
            {
                _liquidClass = value;
            }
        }
        
        ///  <summary>
        /// the well offset
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(4)]
        public Tecan.Sila2.IntegerDto WellOffset
        {
            get
            {
                return _wellOffset;
            }
            set
            {
                _wellOffset = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/Aspirate";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Dispense command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class DispenseRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.IntegerDto _volume;
        
        private Tecan.Sila2.StringDto _labware;
        
        private Tecan.Sila2.StringDto _liquidClass;
        
        private Tecan.Sila2.IntegerDto _wellOffset;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public DispenseRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="volume">the volume that should be dispensed</param>
        ///  <param name="labware">the labware that should be dispensed into</param>
        ///  <param name="liquidClass">the name of the liquid class used for dispensing</param>
        ///  <param name="wellOffset">the well offset</param>
        public DispenseRequestDto(int volume, string labware, string liquidClass, int wellOffset, Tecan.Sila2.IBinaryStore store)
        {
            Volume = new Tecan.Sila2.IntegerDto(volume, store);
            Labware = new Tecan.Sila2.StringDto(labware, store);
            LiquidClass = new Tecan.Sila2.StringDto(liquidClass, store);
            WellOffset = new Tecan.Sila2.IntegerDto(wellOffset, store);
        }
        
        ///  <summary>
        /// the volume that should be dispensed
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.IntegerDto Volume
        {
            get
            {
                return _volume;
            }
            set
            {
                _volume = value;
            }
        }
        
        ///  <summary>
        /// the labware that should be dispensed into
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto Labware
        {
            get
            {
                return _labware;
            }
            set
            {
                _labware = value;
            }
        }
        
        ///  <summary>
        /// the name of the liquid class used for dispensing
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(3)]
        public Tecan.Sila2.StringDto LiquidClass
        {
            get
            {
                return _liquidClass;
            }
            set
            {
                _liquidClass = value;
            }
        }
        
        ///  <summary>
        /// the well offset
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(4)]
        public Tecan.Sila2.IntegerDto WellOffset
        {
            get
            {
                return _wellOffset;
            }
            set
            {
                _wellOffset = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/Dispense";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Drop Tips command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class DropTipsRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _labware;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public DropTipsRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="labware">the labware</param>
        public DropTipsRequestDto(string labware, Tecan.Sila2.IBinaryStore store)
        {
            Labware = new Tecan.Sila2.StringDto(labware, store);
        }
        
        ///  <summary>
        /// the labware
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Labware
        {
            get
            {
                return _labware;
            }
            set
            {
                _labware = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/DropTips";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Start Fluent Or Attach command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class StartFluentOrAttachRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public StartFluentOrAttachRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public StartFluentOrAttachRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/StartFluentOrAttach";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Start Fluent And Login command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class StartFluentAndLoginRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _username;
        
        private Tecan.Sila2.StringDto _password;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public StartFluentAndLoginRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="username"></param>
        ///  <param name="password"></param>
        public StartFluentAndLoginRequestDto(string username, string password, Tecan.Sila2.IBinaryStore store)
        {
            Username = new Tecan.Sila2.StringDto(username, store);
            Password = new Tecan.Sila2.StringDto(password, store);
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Username
        {
            get
            {
                return _username;
            }
            set
            {
                _username = value;
            }
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto Password
        {
            get
            {
                return _password;
            }
            set
            {
                _password = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/StartFluentAndLogin";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Start Fluent In Simulation Mode command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class StartFluentInSimulationModeRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public StartFluentInSimulationModeRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public StartFluentInSimulationModeRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/StartFluentInSimulationMode";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Prepare Method command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class PrepareMethodRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _toPrepare;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public PrepareMethodRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="toPrepare">the name of the method to prepare</param>
        public PrepareMethodRequestDto(string toPrepare, Tecan.Sila2.IBinaryStore store)
        {
            ToPrepare = new Tecan.Sila2.StringDto(toPrepare, store);
        }
        
        ///  <summary>
        /// the name of the method to prepare
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto ToPrepare
        {
            get
            {
                return _toPrepare;
            }
            set
            {
                _toPrepare = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/PrepareMethod";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Run Method command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class RunMethodRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public RunMethodRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public RunMethodRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/RunMethod";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Pause Run command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class PauseRunRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public PauseRunRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public PauseRunRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/PauseRun";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Resume Run command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ResumeRunRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public ResumeRunRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public ResumeRunRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/ResumeRun";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Stop Method command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class StopMethodRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public StopMethodRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public StopMethodRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/StopMethod";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Finish Execution command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class FinishExecutionRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public FinishExecutionRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public FinishExecutionRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/FinishExecution";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Close Method command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class CloseMethodRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public CloseMethodRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public CloseMethodRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/CloseMethod";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Set Variable Value command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class SetVariableValueRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _variableName;
        
        private Tecan.Sila2.StringDto _value;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public SetVariableValueRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="variableName">the name of the variable</param>
        ///  <param name="value">the new value of the variable</param>
        public SetVariableValueRequestDto(string variableName, string value, Tecan.Sila2.IBinaryStore store)
        {
            VariableName = new Tecan.Sila2.StringDto(variableName, store);
            Value = new Tecan.Sila2.StringDto(value, store);
        }
        
        ///  <summary>
        /// the name of the variable
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto VariableName
        {
            get
            {
                return _variableName;
            }
            set
            {
                _variableName = value;
            }
        }
        
        ///  <summary>
        /// the new value of the variable
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.StringDto Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/SetVariableValue";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Get Variable Names command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetVariableNamesRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetVariableNamesRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public GetVariableNamesRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GetVariableNames";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the response of the Get Variable Names command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetVariableNamesResponseDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private System.Collections.Generic.List<Tecan.Sila2.StringDto> _returnValue;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetVariableNamesResponseDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="returnValue">A collection of variable names</param>
        public GetVariableNamesResponseDto(System.Collections.Generic.ICollection<string> returnValue, Tecan.Sila2.IBinaryStore store)
        {
            ReturnValue = Tecan.Sila2.DtoExtensions.Encapsulate(returnValue, Tecan.Sila2.StringDto.Create, store);
        }
        
        ///  <summary>
        /// A collection of variable names
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public System.Collections.Generic.List<Tecan.Sila2.StringDto> ReturnValue
        {
            get
            {
                return _returnValue;
            }
            set
            {
                _returnValue = value;
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Get Variable Value command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetVariableValueRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _variableName;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetVariableValueRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="variableName">the name of the variable</param>
        public GetVariableValueRequestDto(string variableName, Tecan.Sila2.IBinaryStore store)
        {
            VariableName = new Tecan.Sila2.StringDto(variableName, store);
        }
        
        ///  <summary>
        /// the name of the variable
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto VariableName
        {
            get
            {
                return _variableName;
            }
            set
            {
                _variableName = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GetVariableValue";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the response of the Get Variable Value command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetVariableValueResponseDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private Tecan.Sila2.StringDto _returnValue;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetVariableValueResponseDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="returnValue">the current value of this variable</param>
        public GetVariableValueResponseDto(string returnValue, Tecan.Sila2.IBinaryStore store)
        {
            ReturnValue = new Tecan.Sila2.StringDto(returnValue, store);
        }
        
        ///  <summary>
        /// the current value of this variable
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto ReturnValue
        {
            get
            {
                return _returnValue;
            }
            set
            {
                _returnValue = value;
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Get All Runnable Methods command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetAllRunnableMethodsRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetAllRunnableMethodsRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public GetAllRunnableMethodsRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/GetAllRunnableMethods";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the response of the Get All Runnable Methods command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class GetAllRunnableMethodsResponseDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private System.Collections.Generic.List<Tecan.Sila2.StringDto> _returnValue;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public GetAllRunnableMethodsResponseDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="returnValue">a collection of runnable methods</param>
        public GetAllRunnableMethodsResponseDto(System.Collections.Generic.ICollection<string> returnValue, Tecan.Sila2.IBinaryStore store)
        {
            ReturnValue = Tecan.Sila2.DtoExtensions.Encapsulate(returnValue, Tecan.Sila2.StringDto.Create, store);
        }
        
        ///  <summary>
        /// a collection of runnable methods
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public System.Collections.Generic.List<Tecan.Sila2.StringDto> ReturnValue
        {
            get
            {
                return _returnValue;
            }
            set
            {
                _returnValue = value;
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Shutdown command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ShutdownRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.IntegerDto _timeout;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public ShutdownRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="timeout">a timeout in seconds</param>
        public ShutdownRequestDto(int timeout, Tecan.Sila2.IBinaryStore store)
        {
            Timeout = new Tecan.Sila2.IntegerDto(timeout, store);
        }
        
        ///  <summary>
        /// a timeout in seconds
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.IntegerDto Timeout
        {
            get
            {
                return _timeout;
            }
            set
            {
                _timeout = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "tecan/fluent/SilaFluentController/v1/Command/Shutdown";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
}

