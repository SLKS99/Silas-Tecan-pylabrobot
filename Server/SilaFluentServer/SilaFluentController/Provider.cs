//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Contracts;
using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace SilaFluentController
{
    
    
    ///  <summary>
    /// Encapsulates provider classes to expose the Fluent Service feature via SiLA2
    /// </summary>
    public sealed partial class SilaFluentControllerProvider
    {
        
        private static string @__ServiceName = "sila2.tecan.fluent.silafluentcontroller.v1.SilaFluentController";
        
        private static Grpc.Core.Method<AddLabwareRequestDto, EmptyRequest> AddLabwareMethod = new Grpc.Core.Method<AddLabwareRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "AddLabware", ProtobufMarshaller<AddLabwareRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<RemoveLabwareRequestDto, EmptyRequest> RemoveLabwareMethod = new Grpc.Core.Method<RemoveLabwareRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "RemoveLabware", ProtobufMarshaller<RemoveLabwareRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<SetLocationRequestDto, EmptyRequest> SetLocationMethod = new Grpc.Core.Method<SetLocationRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "SetLocation", ProtobufMarshaller<SetLocationRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<SubroutineRequestDto, EmptyRequest> SubroutineMethod = new Grpc.Core.Method<SubroutineRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "Subroutine", ProtobufMarshaller<SubroutineRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<TransferLabwareRequestDto, EmptyRequest> TransferLabwareMethod = new Grpc.Core.Method<TransferLabwareRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "TransferLabware", ProtobufMarshaller<TransferLabwareRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<TransferLabwareBackToBaseRequestDto, EmptyRequest> TransferLabwareBackToBaseMethod = new Grpc.Core.Method<TransferLabwareBackToBaseRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "TransferLabwareBackToBase", ProtobufMarshaller<TransferLabwareBackToBaseRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<GenericCommandRequestDto, EmptyRequest> GenericCommandMethod = new Grpc.Core.Method<GenericCommandRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "GenericCommand", ProtobufMarshaller<GenericCommandRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<GetFingersRequestDto, EmptyRequest> GetFingersMethod = new Grpc.Core.Method<GetFingersRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "GetFingers", ProtobufMarshaller<GetFingersRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<DropFingersRequestDto, EmptyRequest> DropFingersMethod = new Grpc.Core.Method<DropFingersRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "DropFingers", ProtobufMarshaller<DropFingersRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<UserPromptRequestDto, EmptyRequest> UserPromptMethod = new Grpc.Core.Method<UserPromptRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "UserPrompt", ProtobufMarshaller<UserPromptRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<GetTipsRequestDto, EmptyRequest> GetTipsMethod = new Grpc.Core.Method<GetTipsRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "GetTips", ProtobufMarshaller<GetTipsRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<AspirateRequestDto, EmptyRequest> AspirateMethod = new Grpc.Core.Method<AspirateRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "Aspirate", ProtobufMarshaller<AspirateRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<DispenseRequestDto, EmptyRequest> DispenseMethod = new Grpc.Core.Method<DispenseRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "Dispense", ProtobufMarshaller<DispenseRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<DropTipsRequestDto, EmptyRequest> DropTipsMethod = new Grpc.Core.Method<DropTipsRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "DropTips", ProtobufMarshaller<DropTipsRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<StartFluentOrAttachRequestDto, EmptyRequest> StartFluentOrAttachMethod = new Grpc.Core.Method<StartFluentOrAttachRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "StartFluentOrAttach", ProtobufMarshaller<StartFluentOrAttachRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<StartFluentAndLoginRequestDto, EmptyRequest> StartFluentAndLoginMethod = new Grpc.Core.Method<StartFluentAndLoginRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "StartFluentAndLogin", ProtobufMarshaller<StartFluentAndLoginRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<StartFluentInSimulationModeRequestDto, EmptyRequest> StartFluentInSimulationModeMethod = new Grpc.Core.Method<StartFluentInSimulationModeRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "StartFluentInSimulationMode", ProtobufMarshaller<StartFluentInSimulationModeRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<PrepareMethodRequestDto, EmptyRequest> PrepareMethodMethod = new Grpc.Core.Method<PrepareMethodRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "PrepareMethod", ProtobufMarshaller<PrepareMethodRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<RunMethodRequestDto, EmptyRequest> RunMethodMethod = new Grpc.Core.Method<RunMethodRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "RunMethod", ProtobufMarshaller<RunMethodRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<PauseRunRequestDto, EmptyRequest> PauseRunMethod = new Grpc.Core.Method<PauseRunRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "PauseRun", ProtobufMarshaller<PauseRunRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<ResumeRunRequestDto, EmptyRequest> ResumeRunMethod = new Grpc.Core.Method<ResumeRunRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "ResumeRun", ProtobufMarshaller<ResumeRunRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<StopMethodRequestDto, EmptyRequest> StopMethodMethod = new Grpc.Core.Method<StopMethodRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "StopMethod", ProtobufMarshaller<StopMethodRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<FinishExecutionRequestDto, EmptyRequest> FinishExecutionMethod = new Grpc.Core.Method<FinishExecutionRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "FinishExecution", ProtobufMarshaller<FinishExecutionRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<CloseMethodRequestDto, EmptyRequest> CloseMethodMethod = new Grpc.Core.Method<CloseMethodRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "CloseMethod", ProtobufMarshaller<CloseMethodRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<SetVariableValueRequestDto, EmptyRequest> SetVariableValueMethod = new Grpc.Core.Method<SetVariableValueRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "SetVariableValue", ProtobufMarshaller<SetVariableValueRequestDto>.Default, EmptyRequest.Marshaller);
        
        private static Grpc.Core.Method<GetVariableNamesRequestDto, GetVariableNamesResponseDto> GetVariableNamesMethod = new Grpc.Core.Method<GetVariableNamesRequestDto, GetVariableNamesResponseDto>(Grpc.Core.MethodType.Unary, @__ServiceName, "GetVariableNames", ProtobufMarshaller<GetVariableNamesRequestDto>.Default, ProtobufMarshaller<GetVariableNamesResponseDto>.Default);
        
        private static Grpc.Core.Method<GetVariableValueRequestDto, GetVariableValueResponseDto> GetVariableValueMethod = new Grpc.Core.Method<GetVariableValueRequestDto, GetVariableValueResponseDto>(Grpc.Core.MethodType.Unary, @__ServiceName, "GetVariableValue", ProtobufMarshaller<GetVariableValueRequestDto>.Default, ProtobufMarshaller<GetVariableValueResponseDto>.Default);
        
        private static Grpc.Core.Method<GetAllRunnableMethodsRequestDto, GetAllRunnableMethodsResponseDto> GetAllRunnableMethodsMethod = new Grpc.Core.Method<GetAllRunnableMethodsRequestDto, GetAllRunnableMethodsResponseDto>(Grpc.Core.MethodType.Unary, @__ServiceName, "GetAllRunnableMethods", ProtobufMarshaller<GetAllRunnableMethodsRequestDto>.Default, ProtobufMarshaller<GetAllRunnableMethodsResponseDto>.Default);
        
        private static Grpc.Core.Method<ShutdownRequestDto, EmptyRequest> ShutdownMethod = new Grpc.Core.Method<ShutdownRequestDto, EmptyRequest>(Grpc.Core.MethodType.Unary, @__ServiceName, "Shutdown", ProtobufMarshaller<ShutdownRequestDto>.Default, EmptyRequest.Marshaller);
        
        ///  <summary>
        /// A class that exposes the ISilaFluentController interface via SiLA2
        /// </summary>
        [System.ComponentModel.Composition.ExportAttribute(typeof(IFeatureProvider))]
        [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
        public partial class Server : IFeatureProvider
        {
            
            private ISilaFluentController _implementation;
            
            private Tecan.Sila2.Server.ISiLAServer _server;
            
            private static Tecan.Sila2.Feature _feature = FeatureSerializer.LoadFromAssembly(typeof(Server).Assembly, "SilaFluentController.sila.xml");
            
            [System.ComponentModel.Composition.ImportingConstructorAttribute()]
            public Server(ISilaFluentController implementation, Tecan.Sila2.Server.ISiLAServer server)
            {
                _implementation = implementation;
                _server = server;
            }
            
            ///  <summary>
            /// The feature that is exposed by this feature provider
            /// </summary>
            /// <returns>A feature object</returns>
            public Tecan.Sila2.Feature FeatureDefinition
            {
                get
                {
                    return _feature;
                }
            }
            
            ///  <summary>
            /// Creates a service definition for this service provider
            /// </summary>
            /// <returns>An object that describes which services are offered by this instance</returns>
            public Grpc.Core.ServerServiceDefinition CreateServiceDefinition()
            {
                Grpc.Core.ServerServiceDefinition.Builder builder = Grpc.Core.ServerServiceDefinition.CreateBuilder();
                builder.AddMethod(AddLabwareMethod, AddLabware);
                builder.AddMethod(RemoveLabwareMethod, RemoveLabware);
                builder.AddMethod(SetLocationMethod, SetLocation);
                builder.AddMethod(SubroutineMethod, Subroutine);
                builder.AddMethod(TransferLabwareMethod, TransferLabware);
                builder.AddMethod(TransferLabwareBackToBaseMethod, TransferLabwareBackToBase);
                builder.AddMethod(GenericCommandMethod, GenericCommand);
                builder.AddMethod(GetFingersMethod, GetFingers);
                builder.AddMethod(DropFingersMethod, DropFingers);
                builder.AddMethod(UserPromptMethod, UserPrompt);
                builder.AddMethod(GetTipsMethod, GetTips);
                builder.AddMethod(AspirateMethod, Aspirate);
                builder.AddMethod(DispenseMethod, Dispense);
                builder.AddMethod(DropTipsMethod, DropTips);
                builder.AddMethod(StartFluentOrAttachMethod, StartFluentOrAttach);
                builder.AddMethod(StartFluentAndLoginMethod, StartFluentAndLogin);
                builder.AddMethod(StartFluentInSimulationModeMethod, StartFluentInSimulationMode);
                builder.AddMethod(PrepareMethodMethod, PrepareMethod);
                builder.AddMethod(RunMethodMethod, RunMethod);
                builder.AddMethod(PauseRunMethod, PauseRun);
                builder.AddMethod(ResumeRunMethod, ResumeRun);
                builder.AddMethod(StopMethodMethod, StopMethod);
                builder.AddMethod(FinishExecutionMethod, FinishExecution);
                builder.AddMethod(CloseMethodMethod, CloseMethod);
                builder.AddMethod(SetVariableValueMethod, SetVariableValue);
                builder.AddMethod(GetVariableNamesMethod, GetVariableNames);
                builder.AddMethod(GetVariableValueMethod, GetVariableValue);
                builder.AddMethod(GetAllRunnableMethodsMethod, GetAllRunnableMethods);
                builder.AddMethod(ShutdownMethod, Shutdown);
                return builder.Build();
            }
            
            private EmptyRequest AddLabwareInternal(AddLabwareRequestDto request)
            {
                try
                {
                    _implementation.AddLabware(request.Barcode.Extract(_server), request.HasLid.Extract(_server), request.LabwareName.Extract(_server), request.LabwareType.Extract(_server), request.TargetLocation.Extract(_server), ((int)(request.Position.Extract(_server))), ((int)(request.Rotation.Extract(_server))));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the AddLabware command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> AddLabware(AddLabwareRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(AddLabwareInternal, request, context);
            }
            
            private EmptyRequest RemoveLabwareInternal(RemoveLabwareRequestDto request)
            {
                try
                {
                    _implementation.RemoveLabware(request.LabwareName.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the RemoveLabware command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> RemoveLabware(RemoveLabwareRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(RemoveLabwareInternal, request, context);
            }
            
            private EmptyRequest SetLocationInternal(SetLocationRequestDto request)
            {
                try
                {
                    _implementation.SetLocation(request.Labware.Extract(_server), ((int)(request.Rotation.Extract(_server))), request.TargetLocation.Extract(_server), ((int)(request.TargetSite.Extract(_server))));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the SetLocation command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> SetLocation(SetLocationRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(SetLocationInternal, request, context);
            }
            
            private EmptyRequest SubroutineInternal(SubroutineRequestDto request)
            {
                try
                {
                    _implementation.Subroutine(request.SubroutineName.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the Subroutine command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> Subroutine(SubroutineRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(SubroutineInternal, request, context);
            }
            
            private EmptyRequest TransferLabwareInternal(TransferLabwareRequestDto request)
            {
                try
                {
                    _implementation.TransferLabware(request.LabwareToLocation.Extract(_server), request.OnlyUseSelectedSite.Extract(_server), request.TargetLocation.Extract(_server), ((int)(request.TargetPosition.Extract(_server))));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the TransferLabware command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> TransferLabware(TransferLabwareRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(TransferLabwareInternal, request, context);
            }
            
            private EmptyRequest TransferLabwareBackToBaseInternal(TransferLabwareBackToBaseRequestDto request)
            {
                try
                {
                    _implementation.TransferLabwareBackToBase(request.LabwareName.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the TransferLabwareBackToBase command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> TransferLabwareBackToBase(TransferLabwareBackToBaseRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(TransferLabwareBackToBaseInternal, request, context);
            }
            
            private EmptyRequest GenericCommandInternal(GenericCommandRequestDto request)
            {
                try
                {
                    _implementation.GenericCommand(request.Content.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the GenericCommand command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> GenericCommand(GenericCommandRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GenericCommandInternal, request, context);
            }
            
            private EmptyRequest GetFingersInternal(GetFingersRequestDto request)
            {
                try
                {
                    _implementation.GetFingers(request.DeviceAlias.Extract(_server), request.GripperFingers.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the GetFingers command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> GetFingers(GetFingersRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GetFingersInternal, request, context);
            }
            
            private EmptyRequest DropFingersInternal(DropFingersRequestDto request)
            {
                try
                {
                    _implementation.DropFingers(request.DeviceAlias.Extract(_server), request.DockingStation.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the DropFingers command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> DropFingers(DropFingersRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(DropFingersInternal, request, context);
            }
            
            private EmptyRequest UserPromptInternal(UserPromptRequestDto request)
            {
                try
                {
                    _implementation.UserPrompt(request.Text.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the UserPrompt command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> UserPrompt(UserPromptRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(UserPromptInternal, request, context);
            }
            
            private EmptyRequest GetTipsInternal(GetTipsRequestDto request)
            {
                try
                {
                    _implementation.GetTips(((int)(request.AirgapVolume.Extract(_server))), ((int)(request.AirgapSpeed.Extract(_server))), request.DiTiType.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the GetTips command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> GetTips(GetTipsRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GetTipsInternal, request, context);
            }
            
            private EmptyRequest AspirateInternal(AspirateRequestDto request)
            {
                try
                {
                    _implementation.Aspirate(((int)(request.Volume.Extract(_server))), request.Labware.Extract(_server), request.LiquidClass.Extract(_server), ((int)(request.WellOffset.Extract(_server))));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the Aspirate command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> Aspirate(AspirateRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(AspirateInternal, request, context);
            }
            
            private EmptyRequest DispenseInternal(DispenseRequestDto request)
            {
                try
                {
                    _implementation.Dispense(((int)(request.Volume.Extract(_server))), request.Labware.Extract(_server), request.LiquidClass.Extract(_server), ((int)(request.WellOffset.Extract(_server))));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the Dispense command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> Dispense(DispenseRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(DispenseInternal, request, context);
            }
            
            private EmptyRequest DropTipsInternal(DropTipsRequestDto request)
            {
                try
                {
                    _implementation.DropTips(request.Labware.Extract(_server));
                    return EmptyRequest.Instance;
                } catch (NoExecutionChannelException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/NoExecutionChannel", "", ex.Message);
                } catch (RuntimeException ex)
                {
                    throw ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedError/Runtime", "", ex.Message);
                }
            }
            
            ///  <summary>
            /// Executes the DropTips command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> DropTips(DropTipsRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(DropTipsInternal, request, context);
            }
            
            private EmptyRequest StartFluentOrAttachInternal(StartFluentOrAttachRequestDto request)
            {
                _implementation.StartFluentOrAttach();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the StartFluentOrAttach command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> StartFluentOrAttach(StartFluentOrAttachRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(StartFluentOrAttachInternal, request, context);
            }
            
            private EmptyRequest StartFluentAndLoginInternal(StartFluentAndLoginRequestDto request)
            {
                _implementation.StartFluentAndLogin(request.Username.Extract(_server), request.Password.Extract(_server));
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the StartFluentAndLogin command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> StartFluentAndLogin(StartFluentAndLoginRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(StartFluentAndLoginInternal, request, context);
            }
            
            private EmptyRequest StartFluentInSimulationModeInternal(StartFluentInSimulationModeRequestDto request)
            {
                _implementation.StartFluentInSimulationMode();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the StartFluentInSimulationMode command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> StartFluentInSimulationMode(StartFluentInSimulationModeRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(StartFluentInSimulationModeInternal, request, context);
            }
            
            private EmptyRequest PrepareMethodInternal(PrepareMethodRequestDto request)
            {
                _implementation.PrepareMethod(request.ToPrepare.Extract(_server));
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the PrepareMethod command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> PrepareMethod(PrepareMethodRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(PrepareMethodInternal, request, context);
            }
            
            private EmptyRequest RunMethodInternal(RunMethodRequestDto request)
            {
                _implementation.RunMethod();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the RunMethod command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> RunMethod(RunMethodRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(RunMethodInternal, request, context);
            }
            
            private EmptyRequest PauseRunInternal(PauseRunRequestDto request)
            {
                _implementation.PauseRun();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the PauseRun command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> PauseRun(PauseRunRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(PauseRunInternal, request, context);
            }
            
            private EmptyRequest ResumeRunInternal(ResumeRunRequestDto request)
            {
                _implementation.ResumeRun();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the ResumeRun command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> ResumeRun(ResumeRunRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(ResumeRunInternal, request, context);
            }
            
            private EmptyRequest StopMethodInternal(StopMethodRequestDto request)
            {
                _implementation.StopMethod();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the StopMethod command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> StopMethod(StopMethodRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(StopMethodInternal, request, context);
            }
            
            private EmptyRequest FinishExecutionInternal(FinishExecutionRequestDto request)
            {
                _implementation.FinishExecution();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the FinishExecution command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> FinishExecution(FinishExecutionRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(FinishExecutionInternal, request, context);
            }
            
            private EmptyRequest CloseMethodInternal(CloseMethodRequestDto request)
            {
                _implementation.CloseMethod();
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the CloseMethod command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> CloseMethod(CloseMethodRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(CloseMethodInternal, request, context);
            }
            
            private EmptyRequest SetVariableValueInternal(SetVariableValueRequestDto request)
            {
                _implementation.SetVariableValue(request.VariableName.Extract(_server), request.Value.Extract(_server));
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the SetVariableValue command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> SetVariableValue(SetVariableValueRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(SetVariableValueInternal, request, context);
            }
            
            private GetVariableNamesResponseDto GetVariableNamesInternal(GetVariableNamesRequestDto request)
            {
                return new GetVariableNamesResponseDto(_implementation.GetVariableNames(), _server);
            }
            
            ///  <summary>
            /// Executes the GetVariableNames command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<GetVariableNamesResponseDto> GetVariableNames(GetVariableNamesRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GetVariableNamesInternal, request, context);
            }
            
            private GetVariableValueResponseDto GetVariableValueInternal(GetVariableValueRequestDto request)
            {
                return new GetVariableValueResponseDto(_implementation.GetVariableValue(request.VariableName.Extract(_server)), _server);
            }
            
            ///  <summary>
            /// Executes the GetVariableValue command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<GetVariableValueResponseDto> GetVariableValue(GetVariableValueRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GetVariableValueInternal, request, context);
            }
            
            private GetAllRunnableMethodsResponseDto GetAllRunnableMethodsInternal(GetAllRunnableMethodsRequestDto request)
            {
                return new GetAllRunnableMethodsResponseDto(_implementation.GetAllRunnableMethods(), _server);
            }
            
            ///  <summary>
            /// Executes the GetAllRunnableMethods command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<GetAllRunnableMethodsResponseDto> GetAllRunnableMethods(GetAllRunnableMethodsRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(GetAllRunnableMethodsInternal, request, context);
            }
            
            private EmptyRequest ShutdownInternal(ShutdownRequestDto request)
            {
                _implementation.Shutdown(((int)(request.Timeout.Extract(_server))));
                return EmptyRequest.Instance;
            }
            
            ///  <summary>
            /// Executes the Shutdown command
            /// </summary>
            /// <param name="request">A data transfer object that contains the command parameters</param>
            /// <param name="context">The context in which the command is issued</param>
            /// <returns>The command response wrapped in a data transfer object</returns>
            protected virtual System.Threading.Tasks.Task<EmptyRequest> Shutdown(ShutdownRequestDto request, Grpc.Core.ServerCallContext context)
            {
                return _server.InvokeCommand(ShutdownInternal, request, context);
            }
            
            ///  <summary>
            /// Gets the command with the given identifier
            /// </summary>
            /// <param name="commandIdentifier">A fully qualified command identifier</param>
            /// <returns>A method object or null, if the command is not supported</returns>
            public System.Reflection.MethodInfo GetCommand(string commandIdentifier)
            {
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/AddLabware"))
                {
                    return typeof(ISilaFluentController).GetMethod("AddLabware");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/RemoveLabware"))
                {
                    return typeof(ISilaFluentController).GetMethod("RemoveLabware");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/SetLocation"))
                {
                    return typeof(ISilaFluentController).GetMethod("SetLocation");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Subroutine"))
                {
                    return typeof(ISilaFluentController).GetMethod("Subroutine");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/TransferLabware"))
                {
                    return typeof(ISilaFluentController).GetMethod("TransferLabware");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/TransferLabwareBackToBase"))
                {
                    return typeof(ISilaFluentController).GetMethod("TransferLabwareBackToBase");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GenericCommand"))
                {
                    return typeof(ISilaFluentController).GetMethod("GenericCommand");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetFingers"))
                {
                    return typeof(ISilaFluentController).GetMethod("GetFingers");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/DropFingers"))
                {
                    return typeof(ISilaFluentController).GetMethod("DropFingers");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/UserPrompt"))
                {
                    return typeof(ISilaFluentController).GetMethod("UserPrompt");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetTips"))
                {
                    return typeof(ISilaFluentController).GetMethod("GetTips");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Aspirate"))
                {
                    return typeof(ISilaFluentController).GetMethod("Aspirate");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Dispense"))
                {
                    return typeof(ISilaFluentController).GetMethod("Dispense");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/DropTips"))
                {
                    return typeof(ISilaFluentController).GetMethod("DropTips");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentOrAttach"))
                {
                    return typeof(ISilaFluentController).GetMethod("StartFluentOrAttach");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentAndLogin"))
                {
                    return typeof(ISilaFluentController).GetMethod("StartFluentAndLogin");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentInSimulationMode"))
                {
                    return typeof(ISilaFluentController).GetMethod("StartFluentInSimulationMode");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/PrepareMethod"))
                {
                    return typeof(ISilaFluentController).GetMethod("PrepareMethod");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/RunMethod"))
                {
                    return typeof(ISilaFluentController).GetMethod("RunMethod");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/PauseRun"))
                {
                    return typeof(ISilaFluentController).GetMethod("PauseRun");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/ResumeRun"))
                {
                    return typeof(ISilaFluentController).GetMethod("ResumeRun");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StopMethod"))
                {
                    return typeof(ISilaFluentController).GetMethod("StopMethod");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/FinishExecution"))
                {
                    return typeof(ISilaFluentController).GetMethod("FinishExecution");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/CloseMethod"))
                {
                    return typeof(ISilaFluentController).GetMethod("CloseMethod");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/SetVariableValue"))
                {
                    return typeof(ISilaFluentController).GetMethod("SetVariableValue");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetVariableNames"))
                {
                    return typeof(ISilaFluentController).GetMethod("GetVariableNames");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetVariableValue"))
                {
                    return typeof(ISilaFluentController).GetMethod("GetVariableValue");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetAllRunnableMethods"))
                {
                    return typeof(ISilaFluentController).GetMethod("GetAllRunnableMethods");
                }
                if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Shutdown"))
                {
                    return typeof(ISilaFluentController).GetMethod("Shutdown");
                }
                return null;
            }
            
            ///  <summary>
            /// Gets the property with the given identifier
            /// </summary>
            /// <param name="propertyIdentifier">A fully qualified property identifier</param>
            /// <returns>A property object or null, if the property is not supported</returns>
            public System.Reflection.PropertyInfo GetProperty(string propertyIdentifier)
            {
                return null;
            }
        }
    }
}


