//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;
using Tecan.VisionX.Sila2;

namespace Tecan.VisionX.Sila2.SilaFluentController
{


    ///  <summary>
    /// A class that exposes the ISilaFluentController interface via SiLA2
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute( typeof( IFeatureProvider ) )]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute( System.ComponentModel.Composition.CreationPolicy.Shared )]
    public partial class SilaFluentControllerProvider : IFeatureProvider
    {
        
        private ISilaFluentController _implementation;
        
        private Tecan.Sila2.Server.ISiLAServer _server;
        
        private static Tecan.Sila2.Feature _feature = FeatureSerializer.LoadFromAssembly(typeof(SilaFluentControllerProvider).Assembly, "SilaFluentController.sila.xml");

        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="implementation">The implementation to exported through SiLA2</param>
        /// <param name="server">The SiLA2 server instance through which the implementation shall be exported</param>
        [System.ComponentModel.Composition.ImportingConstructorAttribute()]
        public SilaFluentControllerProvider(ISilaFluentController implementation, Tecan.Sila2.Server.ISiLAServer server)
        {
            _implementation = implementation;
            _server = server;
        }
        
        ///  <summary>
        /// The feature that is exposed by this feature provider
        /// </summary>
        /// <returns>A feature object</returns>
        public Tecan.Sila2.Feature FeatureDefinition
        {
            get
            {
                return _feature;
            }
        }
        
        ///  <summary>
        /// Registers the feature in the provided feature registration
        /// </summary>
        /// <param name="registration">The registration component to which the feature should be registered</param>
        public void Register(IServerBuilder registration)
        {
            registration.RegisterUnobservableCommand<AddLabwareRequestDto, EmptyRequest>("AddLabware", AddLabware);
            registration.RegisterUnobservableCommand<RemoveLabwareRequestDto, EmptyRequest>("RemoveLabware", RemoveLabware);
            registration.RegisterUnobservableCommand<SetLocationRequestDto, EmptyRequest>("SetLocation", SetLocation);
            registration.RegisterUnobservableCommand<SubroutineRequestDto, EmptyRequest>("Subroutine", Subroutine);
            registration.RegisterUnobservableCommand<TransferLabwareRequestDto, EmptyRequest>("TransferLabware", TransferLabware);
            registration.RegisterUnobservableCommand<TransferLabwareBackToBaseRequestDto, EmptyRequest>("TransferLabwareBackToBase", TransferLabwareBackToBase);
            registration.RegisterUnobservableCommand<GenericCommandRequestDto, EmptyRequest>("GenericCommand", GenericCommand);
            registration.RegisterUnobservableCommand<GetFingersRequestDto, EmptyRequest>("GetFingers", GetFingers);
            registration.RegisterUnobservableCommand<DropFingersRequestDto, EmptyRequest>("DropFingers", DropFingers);
            registration.RegisterUnobservableCommand<UserPromptRequestDto, EmptyRequest>("UserPrompt", UserPrompt);
            registration.RegisterUnobservableCommand<GetTipsRequestDto, EmptyRequest>("GetTips", GetTips);
            registration.RegisterUnobservableCommand<AspirateRequestDto, EmptyRequest>("Aspirate", Aspirate);
            registration.RegisterUnobservableCommand<DispenseRequestDto, EmptyRequest>("Dispense", Dispense);
            registration.RegisterUnobservableCommand<DropTipsRequestDto, EmptyRequest>("DropTips", DropTips);
            registration.RegisterUnobservableCommand<StartFluentOrAttachRequestDto, EmptyRequest>("StartFluentOrAttach", StartFluentOrAttach);
            registration.RegisterUnobservableCommand<StartFluentAndLoginRequestDto, EmptyRequest>("StartFluentAndLogin", StartFluentAndLogin);
            registration.RegisterUnobservableCommand<StartFluentInSimulationModeRequestDto, EmptyRequest>("StartFluentInSimulationMode", StartFluentInSimulationMode);
            registration.RegisterUnobservableCommand<PrepareMethodRequestDto, EmptyRequest>("PrepareMethod", PrepareMethod);
            registration.RegisterUnobservableCommand<RunMethodRequestDto, EmptyRequest>("RunMethod", RunMethod);
            registration.RegisterUnobservableCommand<PauseRunRequestDto, EmptyRequest>("PauseRun", PauseRun);
            registration.RegisterUnobservableCommand<ResumeRunRequestDto, EmptyRequest>("ResumeRun", ResumeRun);
            registration.RegisterUnobservableCommand<StopMethodRequestDto, EmptyRequest>("StopMethod", StopMethod);
            registration.RegisterUnobservableCommand<FinishExecutionRequestDto, EmptyRequest>("FinishExecution", FinishExecution);
            registration.RegisterUnobservableCommand<CloseMethodRequestDto, EmptyRequest>("CloseMethod", CloseMethod);
            registration.RegisterUnobservableCommand<SetVariableValueRequestDto, EmptyRequest>("SetVariableValue", SetVariableValue);
            registration.RegisterUnobservableCommand<GetVariableNamesRequestDto, GetVariableNamesResponseDto>("GetVariableNames", GetVariableNames);
            registration.RegisterUnobservableCommand<GetVariableValueRequestDto, GetVariableValueResponseDto>("GetVariableValue", GetVariableValue);
            registration.RegisterUnobservableCommand<GetAllRunnableMethodsRequestDto, GetAllRunnableMethodsResponseDto>("GetAllRunnableMethods", GetAllRunnableMethods);
            registration.RegisterUnobservableCommand<ShutdownRequestDto, EmptyRequest>("Shutdown", Shutdown);
        }
        
        ///  <summary>
        /// Executes the Add Labware command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest AddLabware(AddLabwareRequestDto request)
        {
            try
            {
                _implementation.AddLabware(request.Barcode.Extract(_server), request.HasLid.Extract(_server), request.LabwareName.Extract(_server), request.LabwareType.Extract(_server), request.TargetLocation.Extract(_server), ((int)(request.Position.Extract(_server))), ((int)(request.Rotation.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "barcode"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/Barcode", ex.Message);
                }
                if ((ex.ParamName == "hasLid"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/HasLid", ex.Message);
                }
                if ((ex.ParamName == "labwareName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/LabwareName", ex.Message);
                }
                if ((ex.ParamName == "labwareType"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/LabwareType", ex.Message);
                }
                if ((ex.ParamName == "targetLocation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/TargetLocation", ex.Message);
                }
                if ((ex.ParamName == "position"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/Position", ex.Message);
                }
                if ((ex.ParamName == "rotation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/AddLabware/Parameter/Rotation", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Remove Labware command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest RemoveLabware(RemoveLabwareRequestDto request)
        {
            try
            {
                _implementation.RemoveLabware(request.LabwareName.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "labwareName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/RemoveLabware/Parameter/LabwareName", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Set Location command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest SetLocation(SetLocationRequestDto request)
        {
            try
            {
                _implementation.SetLocation(request.Labware.Extract(_server), ((int)(request.Rotation.Extract(_server))), request.TargetLocation.Extract(_server), ((int)(request.TargetSite.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "labware"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetLocation/Parameter/Labware", ex.Message);
                }
                if ((ex.ParamName == "rotation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetLocation/Parameter/Rotation", ex.Message);
                }
                if ((ex.ParamName == "targetLocation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetLocation/Parameter/TargetLocation" +
                            "", ex.Message);
                }
                if ((ex.ParamName == "targetSite"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetLocation/Parameter/TargetSite", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Subroutine command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest Subroutine(SubroutineRequestDto request)
        {
            try
            {
                _implementation.Subroutine(request.SubroutineName.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "subroutineName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Subroutine/Parameter/SubroutineName", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Transfer Labware command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest TransferLabware(TransferLabwareRequestDto request)
        {
            try
            {
                _implementation.TransferLabware(request.LabwareToLocation.Extract(_server), request.OnlyUseSelectedSite.Extract(_server), request.TargetLocation.Extract(_server), ((int)(request.TargetPosition.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "labwareToLocation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/TransferLabware/Parameter/LabwareToL" +
                            "ocation", ex.Message);
                }
                if ((ex.ParamName == "onlyUseSelectedSite"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/TransferLabware/Parameter/OnlyUseSel" +
                            "ectedSite", ex.Message);
                }
                if ((ex.ParamName == "targetLocation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/TransferLabware/Parameter/TargetLoca" +
                            "tion", ex.Message);
                }
                if ((ex.ParamName == "targetPosition"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/TransferLabware/Parameter/TargetPosi" +
                            "tion", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Transfer Labware Back To Base command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest TransferLabwareBackToBase(TransferLabwareBackToBaseRequestDto request)
        {
            try
            {
                _implementation.TransferLabwareBackToBase(request.LabwareName.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "labwareName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/TransferLabwareBackToBase/Parameter/" +
                            "LabwareName", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Generic Command command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest GenericCommand(GenericCommandRequestDto request)
        {
            try
            {
                _implementation.GenericCommand(request.Content.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "content"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GenericCommand/Parameter/Content", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Get Fingers command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest GetFingers(GetFingersRequestDto request)
        {
            try
            {
                _implementation.GetFingers(request.DeviceAlias.Extract(_server), request.GripperFingers.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "deviceAlias"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetFingers/Parameter/DeviceAlias", ex.Message);
                }
                if ((ex.ParamName == "gripperFingers"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetFingers/Parameter/GripperFingers", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Drop Fingers command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest DropFingers(DropFingersRequestDto request)
        {
            try
            {
                _implementation.DropFingers(request.DeviceAlias.Extract(_server), request.DockingStation.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "deviceAlias"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/DropFingers/Parameter/DeviceAlias", ex.Message);
                }
                if ((ex.ParamName == "dockingStation"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/DropFingers/Parameter/DockingStation" +
                            "", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the User Prompt command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest UserPrompt(UserPromptRequestDto request)
        {
            try
            {
                _implementation.UserPrompt(request.Text.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "text"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/UserPrompt/Parameter/Text", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Get Tips command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest GetTips(GetTipsRequestDto request)
        {
            try
            {
                _implementation.GetTips(((int)(request.AirgapVolume.Extract(_server))), ((int)(request.AirgapSpeed.Extract(_server))), request.DiTiType.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "airgapVolume"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetTips/Parameter/AirgapVolume", ex.Message);
                }
                if ((ex.ParamName == "airgapSpeed"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetTips/Parameter/AirgapSpeed", ex.Message);
                }
                if ((ex.ParamName == "diTiType"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetTips/Parameter/DiTiType", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Aspirate command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest Aspirate(AspirateRequestDto request)
        {
            try
            {
                _implementation.Aspirate(((int)(request.Volume.Extract(_server))), request.Labware.Extract(_server), request.LiquidClass.Extract(_server), ((int)(request.WellOffset.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "volume"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Aspirate/Parameter/Volume", ex.Message);
                }
                if ((ex.ParamName == "labware"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Aspirate/Parameter/Labware", ex.Message);
                }
                if ((ex.ParamName == "liquidClass"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Aspirate/Parameter/LiquidClass", ex.Message);
                }
                if ((ex.ParamName == "wellOffset"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Aspirate/Parameter/WellOffset", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Dispense command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest Dispense(DispenseRequestDto request)
        {
            try
            {
                _implementation.Dispense(((int)(request.Volume.Extract(_server))), request.Labware.Extract(_server), request.LiquidClass.Extract(_server), ((int)(request.WellOffset.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "volume"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Dispense/Parameter/Volume", ex.Message);
                }
                if ((ex.ParamName == "labware"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Dispense/Parameter/Labware", ex.Message);
                }
                if ((ex.ParamName == "liquidClass"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Dispense/Parameter/LiquidClass", ex.Message);
                }
                if ((ex.ParamName == "wellOffset"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Dispense/Parameter/WellOffset", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Drop Tips command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest DropTips(DropTipsRequestDto request)
        {
            try
            {
                _implementation.DropTips(request.Labware.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "labware"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/DropTips/Parameter/Labware", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            } catch (NoExecutionChannelException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/NoExecutionChannel", "Denotes the error that no execution channel has been opened", ex.Message);
            } catch (RuntimeException ex)
            {
                throw _server.ErrorHandling.CreateExecutionError("tecan/fluent/SilaFluentController/v1/DefinedExecutionError/Runtime", "Denotes that an error occurred while executing a script", ex.Message);
            }
        }
        
        ///  <summary>
        /// Executes the Start Fluent Or Attach command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StartFluentOrAttach(StartFluentOrAttachRequestDto request)
        {
            _implementation.StartFluentOrAttach();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Start Fluent And Login command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StartFluentAndLogin(StartFluentAndLoginRequestDto request)
        {
            try
            {
                _implementation.StartFluentAndLogin(request.Username.Extract(_server), request.Password.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "username"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/StartFluentAndLogin/Parameter/Userna" +
                            "me", ex.Message);
                }
                if ((ex.ParamName == "password"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/StartFluentAndLogin/Parameter/Passwo" +
                            "rd", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            }
        }
        
        ///  <summary>
        /// Executes the Start Fluent In Simulation Mode command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StartFluentInSimulationMode(StartFluentInSimulationModeRequestDto request)
        {
            _implementation.StartFluentInSimulationMode();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Prepare Method command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest PrepareMethod(PrepareMethodRequestDto request)
        {
            try
            {
                _implementation.PrepareMethod(request.ToPrepare.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "toPrepare"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/PrepareMethod/Parameter/ToPrepare", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            }
        }
        
        ///  <summary>
        /// Executes the Run Method command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest RunMethod(RunMethodRequestDto request)
        {
            _implementation.RunMethod();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Pause Run command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest PauseRun(PauseRunRequestDto request)
        {
            _implementation.PauseRun();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Resume Run command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest ResumeRun(ResumeRunRequestDto request)
        {
            _implementation.ResumeRun();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Stop Method command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest StopMethod(StopMethodRequestDto request)
        {
            _implementation.StopMethod();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Finish Execution command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest FinishExecution(FinishExecutionRequestDto request)
        {
            _implementation.FinishExecution();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Close Method command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest CloseMethod(CloseMethodRequestDto request)
        {
            _implementation.CloseMethod();
            return EmptyRequest.Instance;
        }
        
        ///  <summary>
        /// Executes the Set Variable Value command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest SetVariableValue(SetVariableValueRequestDto request)
        {
            try
            {
                _implementation.SetVariableValue(request.VariableName.Extract(_server), request.Value.Extract(_server));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "variableName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetVariableValue/Parameter/VariableN" +
                            "ame", ex.Message);
                }
                if ((ex.ParamName == "value"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/SetVariableValue/Parameter/Value", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            }
        }
        
        ///  <summary>
        /// Executes the Get Variable Names command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual GetVariableNamesResponseDto GetVariableNames(GetVariableNamesRequestDto request)
        {
            return new GetVariableNamesResponseDto(_implementation.GetVariableNames(), _server);
        }
        
        ///  <summary>
        /// Executes the Get Variable Value command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual GetVariableValueResponseDto GetVariableValue(GetVariableValueRequestDto request)
        {
            try
            {
                return new GetVariableValueResponseDto(_implementation.GetVariableValue(request.VariableName.Extract(_server)), _server);
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "variableName"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/GetVariableValue/Parameter/VariableN" +
                            "ame", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            }
        }
        
        ///  <summary>
        /// Executes the Get All Runnable Methods command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual GetAllRunnableMethodsResponseDto GetAllRunnableMethods(GetAllRunnableMethodsRequestDto request)
        {
            return new GetAllRunnableMethodsResponseDto(_implementation.GetAllRunnableMethods(), _server);
        }
        
        ///  <summary>
        /// Executes the Shutdown command
        /// </summary>
        /// <param name="request">A data transfer object that contains the command parameters</param>
        /// <returns>The command response wrapped in a data transfer object</returns>
        protected virtual EmptyRequest Shutdown(ShutdownRequestDto request)
        {
            try
            {
                _implementation.Shutdown(((int)(request.Timeout.Extract(_server))));
                return EmptyRequest.Instance;
            } catch (System.ArgumentException ex)
            {
                if ((ex.ParamName == "timeout"))
                {
                    throw _server.ErrorHandling.CreateValidationError("tecan/fluent/SilaFluentController/v1/Command/Shutdown/Parameter/Timeout", ex.Message);
                }
                throw _server.ErrorHandling.CreateUnknownValidationError(ex);
            }
        }
        
        ///  <summary>
        /// Gets the command with the given identifier
        /// </summary>
        /// <param name="commandIdentifier">A fully qualified command identifier</param>
        /// <returns>A method object or null, if the command is not supported</returns>
        public System.Reflection.MethodInfo GetCommand(string commandIdentifier)
        {
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/AddLabware"))
            {
                return typeof(ISilaFluentController).GetMethod("AddLabware");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/RemoveLabware"))
            {
                return typeof(ISilaFluentController).GetMethod("RemoveLabware");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/SetLocation"))
            {
                return typeof(ISilaFluentController).GetMethod("SetLocation");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Subroutine"))
            {
                return typeof(ISilaFluentController).GetMethod("Subroutine");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/TransferLabware"))
            {
                return typeof(ISilaFluentController).GetMethod("TransferLabware");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/TransferLabwareBackToBase"))
            {
                return typeof(ISilaFluentController).GetMethod("TransferLabwareBackToBase");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GenericCommand"))
            {
                return typeof(ISilaFluentController).GetMethod("GenericCommand");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetFingers"))
            {
                return typeof(ISilaFluentController).GetMethod("GetFingers");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/DropFingers"))
            {
                return typeof(ISilaFluentController).GetMethod("DropFingers");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/UserPrompt"))
            {
                return typeof(ISilaFluentController).GetMethod("UserPrompt");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetTips"))
            {
                return typeof(ISilaFluentController).GetMethod("GetTips");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Aspirate"))
            {
                return typeof(ISilaFluentController).GetMethod("Aspirate");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Dispense"))
            {
                return typeof(ISilaFluentController).GetMethod("Dispense");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/DropTips"))
            {
                return typeof(ISilaFluentController).GetMethod("DropTips");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentOrAttach"))
            {
                return typeof(ISilaFluentController).GetMethod("StartFluentOrAttach");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentAndLogin"))
            {
                return typeof(ISilaFluentController).GetMethod("StartFluentAndLogin");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StartFluentInSimulationMode"))
            {
                return typeof(ISilaFluentController).GetMethod("StartFluentInSimulationMode");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/PrepareMethod"))
            {
                return typeof(ISilaFluentController).GetMethod("PrepareMethod");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/RunMethod"))
            {
                return typeof(ISilaFluentController).GetMethod("RunMethod");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/PauseRun"))
            {
                return typeof(ISilaFluentController).GetMethod("PauseRun");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/ResumeRun"))
            {
                return typeof(ISilaFluentController).GetMethod("ResumeRun");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/StopMethod"))
            {
                return typeof(ISilaFluentController).GetMethod("StopMethod");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/FinishExecution"))
            {
                return typeof(ISilaFluentController).GetMethod("FinishExecution");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/CloseMethod"))
            {
                return typeof(ISilaFluentController).GetMethod("CloseMethod");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/SetVariableValue"))
            {
                return typeof(ISilaFluentController).GetMethod("SetVariableValue");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetVariableNames"))
            {
                return typeof(ISilaFluentController).GetMethod("GetVariableNames");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetVariableValue"))
            {
                return typeof(ISilaFluentController).GetMethod("GetVariableValue");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/GetAllRunnableMethods"))
            {
                return typeof(ISilaFluentController).GetMethod("GetAllRunnableMethods");
            }
            if ((commandIdentifier == "tecan/fluent/SilaFluentController/v1/Command/Shutdown"))
            {
                return typeof(ISilaFluentController).GetMethod("Shutdown");
            }
            return null;
        }
        
        ///  <summary>
        /// Gets the property with the given identifier
        /// </summary>
        /// <param name="propertyIdentifier">A fully qualified property identifier</param>
        /// <returns>A property object or null, if the property is not supported</returns>
        public System.Reflection.PropertyInfo GetProperty(string propertyIdentifier)
        {
            return null;
        }
    }
}


