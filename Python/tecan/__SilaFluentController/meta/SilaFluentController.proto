// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-04-29 09:07:30
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.tecan.fluent.silafluentcontroller.v1;

// Feature: Fluent Service
//   Denotes a service to remote-control FluentControl
service SilaFluentController {
    // Add Labware
    //   Adds new labware to the worktable
    rpc AddLabware(sila2.tecan.fluent.silafluentcontroller.v1.AddLabware_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.AddLabware_Responses) {}
    // Remove Labware
    //   Removes the labware with the given name
    rpc RemoveLabware(sila2.tecan.fluent.silafluentcontroller.v1.RemoveLabware_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.RemoveLabware_Responses) {}
    // Set Location
    //   Sets the location of the given labware
    rpc SetLocation(sila2.tecan.fluent.silafluentcontroller.v1.SetLocation_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.SetLocation_Responses) {}
    // Subroutine
    //   Starts a subroutine with the given name
    rpc Subroutine(sila2.tecan.fluent.silafluentcontroller.v1.Subroutine_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.Subroutine_Responses) {}
    // Transfer Labware
    //   Transfers labware on the worktable with the RGA
    rpc TransferLabware(sila2.tecan.fluent.silafluentcontroller.v1.TransferLabware_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.TransferLabware_Responses) {}
    // Transfer Labware Back To Base
    //   Transfers the given labware back to its base
    rpc TransferLabwareBackToBase(sila2.tecan.fluent.silafluentcontroller.v1.TransferLabwareBackToBase_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.TransferLabwareBackToBase_Responses) {}
    // Generic Command
    //   Executes a generic command
    rpc GenericCommand(sila2.tecan.fluent.silafluentcontroller.v1.GenericCommand_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GenericCommand_Responses) {}
    // Get Fingers
    //   Gets the fingers of the gripper
    rpc GetFingers(sila2.tecan.fluent.silafluentcontroller.v1.GetFingers_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GetFingers_Responses) {}
    // Drop Fingers
    //   Drops the fingers to the provided docking station
    rpc DropFingers(sila2.tecan.fluent.silafluentcontroller.v1.DropFingers_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.DropFingers_Responses) {}
    // User Prompt
    //   Shows a user prompt on TouchTools
    rpc UserPrompt(sila2.tecan.fluent.silafluentcontroller.v1.UserPrompt_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.UserPrompt_Responses) {}
    // Get Tips
    //   Gets tips
    rpc GetTips(sila2.tecan.fluent.silafluentcontroller.v1.GetTips_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GetTips_Responses) {}
    // Aspirate
    //   Aspirates liquid
    rpc Aspirate(sila2.tecan.fluent.silafluentcontroller.v1.Aspirate_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.Aspirate_Responses) {}
    // Dispense
    //   Dispenses liquid
    rpc Dispense(sila2.tecan.fluent.silafluentcontroller.v1.Dispense_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.Dispense_Responses) {}
    // Drop Tips
    //   Drops the currently mounted disposable tips to the provided labware
    rpc DropTips(sila2.tecan.fluent.silafluentcontroller.v1.DropTips_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.DropTips_Responses) {}
    // Start Fluent Or Attach
    //   Starts FluentControl or connect to an instance already running
    rpc StartFluentOrAttach(sila2.tecan.fluent.silafluentcontroller.v1.StartFluentOrAttach_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.StartFluentOrAttach_Responses) {}
    // Start Fluent And Login
    //   Starts FluentControl and log in or connect to an instance already running
    rpc StartFluentAndLogin(sila2.tecan.fluent.silafluentcontroller.v1.StartFluentAndLogin_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.StartFluentAndLogin_Responses) {}
    // Start Fluent In Simulation Mode
    //   Starts FluentControl in simulation mode
    rpc StartFluentInSimulationMode(sila2.tecan.fluent.silafluentcontroller.v1.StartFluentInSimulationMode_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.StartFluentInSimulationMode_Responses) {}
    // Prepare Method
    //   Prepares the method for execution
    rpc PrepareMethod(sila2.tecan.fluent.silafluentcontroller.v1.PrepareMethod_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.PrepareMethod_Responses) {}
    // Run Method
    //   Runs the currently prepared method
    rpc RunMethod(sila2.tecan.fluent.silafluentcontroller.v1.RunMethod_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.RunMethod_Responses) {}
    // Pause Run
    //   Pauses the currently run method
    rpc PauseRun(sila2.tecan.fluent.silafluentcontroller.v1.PauseRun_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.PauseRun_Responses) {}
    // Resume Run
    //   Resumes method execution
    rpc ResumeRun(sila2.tecan.fluent.silafluentcontroller.v1.ResumeRun_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.ResumeRun_Responses) {}
    // Stop Method
    //   Stops the method
    rpc StopMethod(sila2.tecan.fluent.silafluentcontroller.v1.StopMethod_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.StopMethod_Responses) {}
    // Finish Execution
    //   Finishes the execution of the current method
    rpc FinishExecution(sila2.tecan.fluent.silafluentcontroller.v1.FinishExecution_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.FinishExecution_Responses) {}
    // Close Method
    //   Closes the current method
    rpc CloseMethod(sila2.tecan.fluent.silafluentcontroller.v1.CloseMethod_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.CloseMethod_Responses) {}
    // Set Variable Value
    //   Sets the value of the given variable
    rpc SetVariableValue(sila2.tecan.fluent.silafluentcontroller.v1.SetVariableValue_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.SetVariableValue_Responses) {}
    // Get Variable Names
    //   Gets a collection of variable names for the current method
    rpc GetVariableNames(sila2.tecan.fluent.silafluentcontroller.v1.GetVariableNames_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GetVariableNames_Responses) {}
    // Get Variable Value
    //   Gets the value of the provided variable
    rpc GetVariableValue(sila2.tecan.fluent.silafluentcontroller.v1.GetVariableValue_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GetVariableValue_Responses) {}
    // Get All Runnable Methods
    //   Gets a collection of runnable methods
    rpc GetAllRunnableMethods(sila2.tecan.fluent.silafluentcontroller.v1.GetAllRunnableMethods_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.GetAllRunnableMethods_Responses) {}
    // Shutdown
    //   Shuts down FluentControl
    rpc Shutdown(sila2.tecan.fluent.silafluentcontroller.v1.Shutdown_Parameters) returns (sila2.tecan.fluent.silafluentcontroller.v1.Shutdown_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message AddLabware_Parameters {
    sila2.org.silastandard.String Barcode = 1;
    sila2.org.silastandard.Boolean HasLid = 2;
    sila2.org.silastandard.String LabwareName = 3;
    sila2.org.silastandard.String LabwareType = 4;
    sila2.org.silastandard.String TargetLocation = 5;
    sila2.org.silastandard.Integer Position = 6;
    sila2.org.silastandard.Integer Rotation = 7;
}

message AddLabware_Responses {
    
}

message RemoveLabware_Parameters {
    sila2.org.silastandard.String LabwareName = 1;
}

message RemoveLabware_Responses {
    
}

message SetLocation_Parameters {
    sila2.org.silastandard.String Labware = 1;
    sila2.org.silastandard.Integer Rotation = 2;
    sila2.org.silastandard.String TargetLocation = 3;
    sila2.org.silastandard.Integer TargetSite = 4;
}

message SetLocation_Responses {
    
}

message Subroutine_Parameters {
    sila2.org.silastandard.String SubroutineName = 1;
}

message Subroutine_Responses {
    
}

message TransferLabware_Parameters {
    sila2.org.silastandard.String LabwareToLocation = 1;
    sila2.org.silastandard.Boolean OnlyUseSelectedSite = 2;
    sila2.org.silastandard.String TargetLocation = 3;
    sila2.org.silastandard.Integer TargetPosition = 4;
}

message TransferLabware_Responses {
    
}

message TransferLabwareBackToBase_Parameters {
    sila2.org.silastandard.String LabwareName = 1;
}

message TransferLabwareBackToBase_Responses {
    
}

message GenericCommand_Parameters {
    sila2.org.silastandard.String Content = 1;
}

message GenericCommand_Responses {
    
}

message GetFingers_Parameters {
    sila2.org.silastandard.String DeviceAlias = 1;
    sila2.org.silastandard.String GripperFingers = 2;
}

message GetFingers_Responses {
    
}

message DropFingers_Parameters {
    sila2.org.silastandard.String DeviceAlias = 1;
    sila2.org.silastandard.String DockingStation = 2;
}

message DropFingers_Responses {
    
}

message UserPrompt_Parameters {
    sila2.org.silastandard.String Text = 1;
}

message UserPrompt_Responses {
    
}

message GetTips_Parameters {
    sila2.org.silastandard.Integer AirgapVolume = 1;
    sila2.org.silastandard.Integer AirgapSpeed = 2;
    sila2.org.silastandard.String DiTiType = 3;
}

message GetTips_Responses {
    
}

message Aspirate_Parameters {
    sila2.org.silastandard.Integer Volume = 1;
    sila2.org.silastandard.String Labware = 2;
    sila2.org.silastandard.String LiquidClass = 3;
    sila2.org.silastandard.Integer WellOffset = 4;
}

message Aspirate_Responses {
    
}

message Dispense_Parameters {
    sila2.org.silastandard.Integer Volume = 1;
    sila2.org.silastandard.String Labware = 2;
    sila2.org.silastandard.String LiquidClass = 3;
    sila2.org.silastandard.Integer WellOffset = 4;
}

message Dispense_Responses {
    
}

message DropTips_Parameters {
    sila2.org.silastandard.String Labware = 1;
}

message DropTips_Responses {
    
}

message StartFluentOrAttach_Parameters {
    
}

message StartFluentOrAttach_Responses {
    
}

message StartFluentAndLogin_Parameters {
    sila2.org.silastandard.String Username = 1;
    sila2.org.silastandard.String Password = 2;
}

message StartFluentAndLogin_Responses {
    
}

message StartFluentInSimulationMode_Parameters {
    
}

message StartFluentInSimulationMode_Responses {
    
}

message PrepareMethod_Parameters {
    sila2.org.silastandard.String ToPrepare = 1;
}

message PrepareMethod_Responses {
    
}

message RunMethod_Parameters {
    
}

message RunMethod_Responses {
    
}

message PauseRun_Parameters {
    
}

message PauseRun_Responses {
    
}

message ResumeRun_Parameters {
    
}

message ResumeRun_Responses {
    
}

message StopMethod_Parameters {
    
}

message StopMethod_Responses {
    
}

message FinishExecution_Parameters {
    
}

message FinishExecution_Responses {
    
}

message CloseMethod_Parameters {
    
}

message CloseMethod_Responses {
    
}

message SetVariableValue_Parameters {
    sila2.org.silastandard.String VariableName = 1;
    sila2.org.silastandard.String Value = 2;
}

message SetVariableValue_Responses {
    
}

message GetVariableNames_Parameters {
    
}

message GetVariableNames_Responses {
    repeated sila2.org.silastandard.String ReturnValue = 1;
}

message GetVariableValue_Parameters {
    sila2.org.silastandard.String VariableName = 1;
}

message GetVariableValue_Responses {
    sila2.org.silastandard.String ReturnValue = 1;
}

message GetAllRunnableMethods_Parameters {
    
}

message GetAllRunnableMethods_Responses {
    repeated sila2.org.silastandard.String ReturnValue = 1;
}

message Shutdown_Parameters {
    sila2.org.silastandard.Integer Timeout = 1;
}

message Shutdown_Responses {
    
}


// ----------------- Metadata Definitions ------------------
