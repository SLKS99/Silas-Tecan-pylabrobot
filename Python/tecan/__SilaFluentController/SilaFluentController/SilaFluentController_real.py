"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Fluent Service*

:details: SilaFluentController:
    Denotes a service to remote-control FluentControl

:file:    SilaFluentController_real.py
:authors: Clemens Klein

:date: (creation)          2021-04-29T07:07:30.670110
:date: (last modification) 2021-04-29T07:07:30.670110

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import SilaFluentController_pb2 as SilaFluentController_pb2
# from .gRPC import SilaFluentController_pb2_grpc as SilaFluentController_pb2_grpc

# import default arguments
from .SilaFluentController_default_arguments import default_dict


# noinspection PyPep8Naming,PyUnusedLocal
class SilaFluentControllerReal:
    """
    Implementation of the *Fluent Service* in *Real* mode
        This is a python client for Fluent
    """

    def __init__(self):
        """Class initialiser"""

        logging.debug('Started server in mode: {mode}'.format(mode='Real'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(
                command_progress if command_progress is not None else None
            ),
            estimatedRemainingTime=(
                command_estimated_remaining if command_estimated_remaining is not None else None
            ),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None
            )
        )

    def AddLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.AddLabware_Responses:
        """
        Executes the unobservable command "Add Labware"
            Adds new labware to the worktable
    
        :param request: gRPC request containing the parameters passed:
            request.Barcode (Barcode): the barcode of the labware
            request.HasLid (Has Lid): True, if the labware has a lid
            request.LabwareName (Labware Name): the name of the labware
            request.LabwareType (Labware Type): the type of the labware
            request.TargetLocation (Target Location): the location where the labware should be spawned
            request.Position (Position): the position in the target location group
            request.Rotation (Rotation): the rotation of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command AddLabware here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.AddLabware_Responses(
                **default_dict['AddLabware_Responses']
            )
    
        return return_value
    
    
    def RemoveLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RemoveLabware_Responses:
        """
        Executes the unobservable command "Remove Labware"
            Removes the labware with the given name
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (Labware Name): the name of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command RemoveLabware here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.RemoveLabware_Responses(
                **default_dict['RemoveLabware_Responses']
            )
    
        return return_value
    
    
    def SetLocation(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetLocation_Responses:
        """
        Executes the unobservable command "Set Location"
            Sets the location of the given labware
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): the name of the labware
            request.Rotation (Rotation): the new rotation of the labware
            request.TargetLocation (Target Location): the target location group name
            request.TargetSite (Target Site): the target site
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command SetLocation here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.SetLocation_Responses(
                **default_dict['SetLocation_Responses']
            )
    
        return return_value
    
    
    def Subroutine(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Subroutine_Responses:
        """
        Executes the unobservable command "Subroutine"
            Starts a subroutine with the given name
    
        :param request: gRPC request containing the parameters passed:
            request.SubroutineName (Subroutine Name): the name of the subroutine
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command Subroutine here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.Subroutine_Responses(
                **default_dict['Subroutine_Responses']
            )
    
        return return_value
    
    
    def TransferLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabware_Responses:
        """
        Executes the unobservable command "Transfer Labware"
            Transfers labware on the worktable with the RGA
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareToLocation (Labware To Location): the labware that should be moved
            request.OnlyUseSelectedSite (Only Use Selected Site): True, if the instrument should only use the exact target position, otherwise False
            request.TargetLocation (Target Location): the target location group
            request.TargetPosition (Target Position): the target position
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command TransferLabware here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.TransferLabware_Responses(
                **default_dict['TransferLabware_Responses']
            )
    
        return return_value
    
    
    def TransferLabwareBackToBase(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabwareBackToBase_Responses:
        """
        Executes the unobservable command "Transfer Labware Back To Base"
            Transfers the given labware back to its base
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (Labware Name): the name of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command TransferLabwareBackToBase here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.TransferLabwareBackToBase_Responses(
                **default_dict['TransferLabwareBackToBase_Responses']
            )
    
        return return_value
    
    
    def GenericCommand(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GenericCommand_Responses:
        """
        Executes the unobservable command "Generic Command"
            Executes a generic command
    
        :param request: gRPC request containing the parameters passed:
            request.Content (Content): the XML representation of the command
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GenericCommand here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GenericCommand_Responses(
                **default_dict['GenericCommand_Responses']
            )
    
        return return_value
    
    
    def GetFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetFingers_Responses:
        """
        Executes the unobservable command "Get Fingers"
            Gets the fingers of the gripper
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (Device Alias): the alias of the RGA
            request.GripperFingers (Gripper Fingers): the gripper fingers
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GetFingers here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GetFingers_Responses(
                **default_dict['GetFingers_Responses']
            )
    
        return return_value
    
    
    def DropFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropFingers_Responses:
        """
        Executes the unobservable command "Drop Fingers"
            Drops the fingers to the provided docking station
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (Device Alias): the alias of the RGA
            request.DockingStation (Docking Station): the docking station
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command DropFingers here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.DropFingers_Responses(
                **default_dict['DropFingers_Responses']
            )
    
        return return_value
    
    
    def UserPrompt(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.UserPrompt_Responses:
        """
        Executes the unobservable command "User Prompt"
            Shows a user prompt on TouchTools
    
        :param request: gRPC request containing the parameters passed:
            request.Text (Text): the text to display to the user
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command UserPrompt here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.UserPrompt_Responses(
                **default_dict['UserPrompt_Responses']
            )
    
        return return_value
    
    
    def GetTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetTips_Responses:
        """
        Executes the unobservable command "Get Tips"
            Gets tips
    
        :param request: gRPC request containing the parameters passed:
            request.AirgapVolume (Airgap Volume): the airgap volume
            request.AirgapSpeed (Airgap Speed): the airgap speed
            request.DiTiType (Di Ti Type): the type of disposable tips
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GetTips here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GetTips_Responses(
                **default_dict['GetTips_Responses']
            )
    
        return return_value
    
    
    def Aspirate(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Aspirate_Responses:
        """
        Executes the unobservable command "Aspirate"
            Aspirates liquid
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): the volume that should be aspirated
            request.Labware (Labware): the labware from which should be aspirated
            request.LiquidClass (Liquid Class): the name of the liquid class used for aspiration
            request.WellOffset (Well Offset): the well offset
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command Aspirate here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.Aspirate_Responses(
                **default_dict['Aspirate_Responses']
            )
    
        return return_value
    
    
    def Dispense(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Dispense_Responses:
        """
        Executes the unobservable command "Dispense"
            Dispenses liquid
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): the volume that should be dispensed
            request.Labware (Labware): the labware that should be dispensed into
            request.LiquidClass (Liquid Class): the name of the liquid class used for dispensing
            request.WellOffset (Well Offset): the well offset
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command Dispense here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.Dispense_Responses(
                **default_dict['Dispense_Responses']
            )
    
        return return_value
    
    
    def DropTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropTips_Responses:
        """
        Executes the unobservable command "Drop Tips"
            Drops the currently mounted disposable tips to the provided labware
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command DropTips here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.DropTips_Responses(
                **default_dict['DropTips_Responses']
            )
    
        return return_value
    
    
    def StartFluentOrAttach(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentOrAttach_Responses:
        """
        Executes the unobservable command "Start Fluent Or Attach"
            Starts FluentControl or connect to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command StartFluentOrAttach here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.StartFluentOrAttach_Responses(
                **default_dict['StartFluentOrAttach_Responses']
            )
    
        return return_value
    
    
    def StartFluentAndLogin(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentAndLogin_Responses:
        """
        Executes the unobservable command "Start Fluent And Login"
            Starts FluentControl and log in or connect to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.Username (Username): None
            request.Password (Password): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command StartFluentAndLogin here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.StartFluentAndLogin_Responses(
                **default_dict['StartFluentAndLogin_Responses']
            )
    
        return return_value
    
    
    def StartFluentInSimulationMode(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentInSimulationMode_Responses:
        """
        Executes the unobservable command "Start Fluent In Simulation Mode"
            Starts FluentControl in simulation mode
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command StartFluentInSimulationMode here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.StartFluentInSimulationMode_Responses(
                **default_dict['StartFluentInSimulationMode_Responses']
            )
    
        return return_value
    
    
    def PrepareMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PrepareMethod_Responses:
        """
        Executes the unobservable command "Prepare Method"
            Prepares the method for execution
    
        :param request: gRPC request containing the parameters passed:
            request.ToPrepare (To Prepare): the name of the method to prepare
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command PrepareMethod here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.PrepareMethod_Responses(
                **default_dict['PrepareMethod_Responses']
            )
    
        return return_value
    
    
    def RunMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RunMethod_Responses:
        """
        Executes the unobservable command "Run Method"
            Runs the currently prepared method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command RunMethod here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.RunMethod_Responses(
                **default_dict['RunMethod_Responses']
            )
    
        return return_value
    
    
    def PauseRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PauseRun_Responses:
        """
        Executes the unobservable command "Pause Run"
            Pauses the currently run method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command PauseRun here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.PauseRun_Responses(
                **default_dict['PauseRun_Responses']
            )
    
        return return_value
    
    
    def ResumeRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.ResumeRun_Responses:
        """
        Executes the unobservable command "Resume Run"
            Resumes method execution
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command ResumeRun here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.ResumeRun_Responses(
                **default_dict['ResumeRun_Responses']
            )
    
        return return_value
    
    
    def StopMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StopMethod_Responses:
        """
        Executes the unobservable command "Stop Method"
            Stops the method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command StopMethod here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.StopMethod_Responses(
                **default_dict['StopMethod_Responses']
            )
    
        return return_value
    
    
    def FinishExecution(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.FinishExecution_Responses:
        """
        Executes the unobservable command "Finish Execution"
            Finishes the execution of the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command FinishExecution here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.FinishExecution_Responses(
                **default_dict['FinishExecution_Responses']
            )
    
        return return_value
    
    
    def CloseMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.CloseMethod_Responses:
        """
        Executes the unobservable command "Close Method"
            Closes the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command CloseMethod here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.CloseMethod_Responses(
                **default_dict['CloseMethod_Responses']
            )
    
        return return_value
    
    
    def SetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetVariableValue_Responses:
        """
        Executes the unobservable command "Set Variable Value"
            Sets the value of the given variable
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (Variable Name): the name of the variable
            request.Value (Value): the new value of the variable
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command SetVariableValue here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.SetVariableValue_Responses(
                **default_dict['SetVariableValue_Responses']
            )
    
        return return_value
    
    
    def GetVariableNames(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableNames_Responses:
        """
        Executes the unobservable command "Get Variable Names"
            Gets a collection of variable names for the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): A collection of variable names
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GetVariableNames here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GetVariableNames_Responses(
                **default_dict['GetVariableNames_Responses']
            )
    
        return return_value
    
    
    def GetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableValue_Responses:
        """
        Executes the unobservable command "Get Variable Value"
            Gets the value of the provided variable
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (Variable Name): the name of the variable
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): the current value of this variable
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GetVariableValue here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GetVariableValue_Responses(
                **default_dict['GetVariableValue_Responses']
            )
    
        return return_value
    
    
    def GetAllRunnableMethods(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetAllRunnableMethods_Responses:
        """
        Executes the unobservable command "Get All Runnable Methods"
            Gets a collection of runnable methods
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): a collection of runnable methods
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command GetAllRunnableMethods here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.GetAllRunnableMethods_Responses(
                **default_dict['GetAllRunnableMethods_Responses']
            )
    
        return return_value
    
    
    def Shutdown(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Shutdown_Responses:
        """
        Executes the unobservable command "Shutdown"
            Shuts down FluentControl
    
        :param request: gRPC request containing the parameters passed:
            request.Timeout (Timeout): a timeout in seconds
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Real for command Shutdown here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = SilaFluentController_pb2.Shutdown_Responses(
                **default_dict['Shutdown_Responses']
            )
    
        return return_value
    

    
