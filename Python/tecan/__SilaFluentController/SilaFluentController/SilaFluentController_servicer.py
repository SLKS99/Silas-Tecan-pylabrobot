"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Fluent Service*

:details: SilaFluentController:
    A service to send Commands to Fluent
           
:file:    SilaFluentController_servicer.py
:authors: Clemens Klein

:date: (creation)          2020-02-17T13:47:51.536037
:date: (last modification) 2020-02-17T13:47:51.536037

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
from sila2lib.error_handling.server_err import SiLAError

# import gRPC modules for this feature
from .gRPC import SilaFluentController_pb2 as SilaFluentController_pb2
from .gRPC import SilaFluentController_pb2_grpc as SilaFluentController_pb2_grpc

# import simulation and real implementation
from .SilaFluentController_simulation import SilaFluentControllerSimulation
from .SilaFluentController_real import SilaFluentControllerReal


class SilaFluentController(SilaFluentController_pb2_grpc.SilaFluentControllerServicer):
    """
    This is a python client for Fluent
    """
    implementation: Union[SilaFluentControllerSimulation, SilaFluentControllerReal]
    simulation_mode: bool

    def __init__(self, simulation_mode: bool = True):
        """
        Class initialiser.

        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self._inject_implementation(SilaFluentControllerSimulation())
        else:
            self._inject_implementation(SilaFluentControllerReal())

    def _inject_implementation(self,
                               implementation: Union[SilaFluentControllerSimulation,
                                                     SilaFluentControllerReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the SilaFluentControllerServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(SilaFluentControllerSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(SilaFluentControllerReal())

    def AddLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.AddLabware_Responses:
        """
        Executes the unobservable command "AddLabware"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Barcode (Barcode): None
            request.HasLid (HasLid): None
            request.LabwareName (LabwareName): None
            request.LabwareType (LabwareType): None
            request.TargetLocation (TargetLocation): None
            request.Position (Position): None
            request.Rotation (Rotation): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "AddLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.AddLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def RemoveLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RemoveLabware_Responses:
        """
        Executes the unobservable command "RemoveLabware"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (LabwareName): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "RemoveLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.RemoveLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def SetLocation(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetLocation_Responses:
        """
        Executes the unobservable command "SetLocation"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): None
            request.Rotation (Rotation): None
            request.TargetLocation (TargetLocation): None
            request.TargetSite (TargetSite): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "SetLocation called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.SetLocation(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Subroutine(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Subroutine_Responses:
        """
        Executes the unobservable command "Subroutine"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.SubroutineName (SubroutineName): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Subroutine called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Subroutine(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def TransferLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabware_Responses:
        """
        Executes the unobservable command "TransferLabware"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareToLocation (LabwareToLocation): None
            request.OnlyUseSelectedSite (OnlyUseSelectedSite): None
            request.TargetLocation (TargetLocation): None
            request.TargetPosition (TargetPosition): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "TransferLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.TransferLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def TransferLabwareBackToBase(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabwareBackToBase_Responses:
        """
        Executes the unobservable command "TransferLabwareBackToBase"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (LabwareName): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "TransferLabwareBackToBase called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.TransferLabwareBackToBase(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GenericCommand(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GenericCommand_Responses:
        """
        Executes the unobservable command "GenericCommand"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Content (Content): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GenericCommand called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GenericCommand(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetFingers_Responses:
        """
        Executes the unobservable command "GetFingers"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (DeviceAlias): None
            request.GripperFingers (GripperFingers): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GetFingers called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetFingers(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def DropFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropFingers_Responses:
        """
        Executes the unobservable command "DropFingers"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (DeviceAlias): None
            request.DockingStation (DockingStation): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "DropFingers called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.DropFingers(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def UserPrompt(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.UserPrompt_Responses:
        """
        Executes the unobservable command "UserPrompt"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Text (Text): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "UserPrompt called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.UserPrompt(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetTips_Responses:
        """
        Executes the unobservable command "GetTips"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.AirgapVolume (AirgapVolume): None
            request.AirgapSpeed (AirgapSpeed): None
            request.DiTiType (DiTiType): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GetTips called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetTips(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Aspirate(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Aspirate_Responses:
        """
        Executes the unobservable command "Aspirate"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): None
            request.Labware (Labware): None
            request.LiquidClass (LiquidClass): None
            request.WellOffset (WellOffset): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Aspirate called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Aspirate(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Dispense(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Dispense_Responses:
        """
        Executes the unobservable command "Dispense"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): None
            request.Labware (Labware): None
            request.LiquidClass (LiquidClass): None
            request.WellOffset (WellOffset): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Dispense called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Dispense(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def DropTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropTips_Responses:
        """
        Executes the unobservable command "DropTips"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "DropTips called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.DropTips(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentOrAttach(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentOrAttach_Responses:
        """
        Executes the unobservable command "StartFluentOrAttach"
            Starts Fluent or connects to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentOrAttach called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentOrAttach(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentAndLogin(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentAndLogin_Responses:
        """
        Executes the unobservable command "StartFluentAndLogin"
            Starts Fluent or connects to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.Username (Username): None
            request.Password (Password): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentAndLogin called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentAndLogin(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentInSimulationMode(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentInSimulationMode_Responses:
        """
        Executes the unobservable command "StartFluentInSimulationMode"
            Starts Fluent or connects to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentInSimulationMode called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentInSimulationMode(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def PrepareMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PrepareMethod_Responses:
        """
        Executes the unobservable command "PrepareMethod"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.ToPrepare (ToPrepare): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "PrepareMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.PrepareMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def RunMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RunMethod_Responses:
        """
        Executes the unobservable command "RunMethod"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "RunMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.RunMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def PauseRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PauseRun_Responses:
        """
        Executes the unobservable command "PauseRun"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "PauseRun called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.PauseRun(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def ResumeRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.ResumeRun_Responses:
        """
        Executes the unobservable command "ResumeRun"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "ResumeRun called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.ResumeRun(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StopMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StopMethod_Responses:
        """
        Executes the unobservable command "StopMethod"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StopMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StopMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def FinishExecution(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.FinishExecution_Responses:
        """
        Executes the unobservable command "FinishExecution"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "FinishExecution called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.FinishExecution(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def CloseMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.CloseMethod_Responses:
        """
        Executes the unobservable command "CloseMethod"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "CloseMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.CloseMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def SetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetVariableValue_Responses:
        """
        Executes the unobservable command "SetVariableValue"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (VariableName): None
            request.Value (Value): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "SetVariableValue called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.SetVariableValue(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetVariableNames(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableNames_Responses:
        """
        Executes the unobservable command "GetVariableNames"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (ReturnValue): None
        """
    
        logging.debug(
            "GetVariableNames called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetVariableNames(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableValue_Responses:
        """
        Executes the unobservable command "GetVariableValue"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (VariableName): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (ReturnValue): None
        """
    
        logging.debug(
            "GetVariableValue called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetVariableValue(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetAllRunnableMethods(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetAllRunnableMethods_Responses:
        """
        Executes the unobservable command "GetAllRunnableMethods"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (ReturnValue): None
        """
    
        logging.debug(
            "GetAllRunnableMethods called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetAllRunnableMethods(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Shutdown(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Shutdown_Responses:
        """
        Executes the unobservable command "Shutdown"
            ...
    
        :param request: gRPC request containing the parameters passed:
            request.Timeout (Timeout): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Shutdown called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Shutdown(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    
