"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Fluent Service*

:details: SilaFluentController:
    Denotes a service to remote-control FluentControl
           
:file:    SilaFluentController_servicer.py
:authors: Clemens Klein

:date: (creation)          2021-04-29T07:07:30.551076
:date: (last modification) 2021-04-29T07:07:30.551076

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
from sila2lib.error_handling.server_err import SiLAError

# import gRPC modules for this feature
from .gRPC import SilaFluentController_pb2 as SilaFluentController_pb2
from .gRPC import SilaFluentController_pb2_grpc as SilaFluentController_pb2_grpc

# import simulation and real implementation
from .SilaFluentController_simulation import SilaFluentControllerSimulation
from .SilaFluentController_real import SilaFluentControllerReal


class SilaFluentController(SilaFluentController_pb2_grpc.SilaFluentControllerServicer):
    """
    This is a python client for Fluent
    """
    implementation: Union[SilaFluentControllerSimulation, SilaFluentControllerReal]
    simulation_mode: bool

    def __init__(self, simulation_mode: bool = True):
        """
        Class initialiser.

        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self._inject_implementation(SilaFluentControllerSimulation())
        else:
            self._inject_implementation(SilaFluentControllerReal())

    def _inject_implementation(self,
                               implementation: Union[SilaFluentControllerSimulation,
                                                     SilaFluentControllerReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the SilaFluentControllerServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(SilaFluentControllerSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(SilaFluentControllerReal())

    def AddLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.AddLabware_Responses:
        """
        Executes the unobservable command "Add Labware"
            Adds new labware to the worktable
    
        :param request: gRPC request containing the parameters passed:
            request.Barcode (Barcode): the barcode of the labware
            request.HasLid (Has Lid): True, if the labware has a lid
            request.LabwareName (Labware Name): the name of the labware
            request.LabwareType (Labware Type): the type of the labware
            request.TargetLocation (Target Location): the location where the labware should be spawned
            request.Position (Position): the position in the target location group
            request.Rotation (Rotation): the rotation of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "AddLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.AddLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def RemoveLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RemoveLabware_Responses:
        """
        Executes the unobservable command "Remove Labware"
            Removes the labware with the given name
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (Labware Name): the name of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "RemoveLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.RemoveLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def SetLocation(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetLocation_Responses:
        """
        Executes the unobservable command "Set Location"
            Sets the location of the given labware
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): the name of the labware
            request.Rotation (Rotation): the new rotation of the labware
            request.TargetLocation (Target Location): the target location group name
            request.TargetSite (Target Site): the target site
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "SetLocation called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.SetLocation(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Subroutine(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Subroutine_Responses:
        """
        Executes the unobservable command "Subroutine"
            Starts a subroutine with the given name
    
        :param request: gRPC request containing the parameters passed:
            request.SubroutineName (Subroutine Name): the name of the subroutine
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Subroutine called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Subroutine(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def TransferLabware(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabware_Responses:
        """
        Executes the unobservable command "Transfer Labware"
            Transfers labware on the worktable with the RGA
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareToLocation (Labware To Location): the labware that should be moved
            request.OnlyUseSelectedSite (Only Use Selected Site): True, if the instrument should only use the exact target position, otherwise False
            request.TargetLocation (Target Location): the target location group
            request.TargetPosition (Target Position): the target position
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "TransferLabware called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.TransferLabware(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def TransferLabwareBackToBase(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.TransferLabwareBackToBase_Responses:
        """
        Executes the unobservable command "Transfer Labware Back To Base"
            Transfers the given labware back to its base
    
        :param request: gRPC request containing the parameters passed:
            request.LabwareName (Labware Name): the name of the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "TransferLabwareBackToBase called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.TransferLabwareBackToBase(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GenericCommand(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GenericCommand_Responses:
        """
        Executes the unobservable command "Generic Command"
            Executes a generic command
    
        :param request: gRPC request containing the parameters passed:
            request.Content (Content): the XML representation of the command
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GenericCommand called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GenericCommand(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetFingers_Responses:
        """
        Executes the unobservable command "Get Fingers"
            Gets the fingers of the gripper
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (Device Alias): the alias of the RGA
            request.GripperFingers (Gripper Fingers): the gripper fingers
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GetFingers called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetFingers(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def DropFingers(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropFingers_Responses:
        """
        Executes the unobservable command "Drop Fingers"
            Drops the fingers to the provided docking station
    
        :param request: gRPC request containing the parameters passed:
            request.DeviceAlias (Device Alias): the alias of the RGA
            request.DockingStation (Docking Station): the docking station
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "DropFingers called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.DropFingers(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def UserPrompt(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.UserPrompt_Responses:
        """
        Executes the unobservable command "User Prompt"
            Shows a user prompt on TouchTools
    
        :param request: gRPC request containing the parameters passed:
            request.Text (Text): the text to display to the user
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "UserPrompt called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.UserPrompt(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetTips_Responses:
        """
        Executes the unobservable command "Get Tips"
            Gets tips
    
        :param request: gRPC request containing the parameters passed:
            request.AirgapVolume (Airgap Volume): the airgap volume
            request.AirgapSpeed (Airgap Speed): the airgap speed
            request.DiTiType (Di Ti Type): the type of disposable tips
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "GetTips called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetTips(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Aspirate(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Aspirate_Responses:
        """
        Executes the unobservable command "Aspirate"
            Aspirates liquid
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): the volume that should be aspirated
            request.Labware (Labware): the labware from which should be aspirated
            request.LiquidClass (Liquid Class): the name of the liquid class used for aspiration
            request.WellOffset (Well Offset): the well offset
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Aspirate called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Aspirate(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Dispense(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Dispense_Responses:
        """
        Executes the unobservable command "Dispense"
            Dispenses liquid
    
        :param request: gRPC request containing the parameters passed:
            request.Volume (Volume): the volume that should be dispensed
            request.Labware (Labware): the labware that should be dispensed into
            request.LiquidClass (Liquid Class): the name of the liquid class used for dispensing
            request.WellOffset (Well Offset): the well offset
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Dispense called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Dispense(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def DropTips(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.DropTips_Responses:
        """
        Executes the unobservable command "Drop Tips"
            Drops the currently mounted disposable tips to the provided labware
    
        :param request: gRPC request containing the parameters passed:
            request.Labware (Labware): the labware
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "DropTips called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.DropTips(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentOrAttach(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentOrAttach_Responses:
        """
        Executes the unobservable command "Start Fluent Or Attach"
            Starts FluentControl or connect to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentOrAttach called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentOrAttach(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentAndLogin(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentAndLogin_Responses:
        """
        Executes the unobservable command "Start Fluent And Login"
            Starts FluentControl and log in or connect to an instance already running
    
        :param request: gRPC request containing the parameters passed:
            request.Username (Username): None
            request.Password (Password): None
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentAndLogin called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentAndLogin(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StartFluentInSimulationMode(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StartFluentInSimulationMode_Responses:
        """
        Executes the unobservable command "Start Fluent In Simulation Mode"
            Starts FluentControl in simulation mode
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StartFluentInSimulationMode called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StartFluentInSimulationMode(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def PrepareMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PrepareMethod_Responses:
        """
        Executes the unobservable command "Prepare Method"
            Prepares the method for execution
    
        :param request: gRPC request containing the parameters passed:
            request.ToPrepare (To Prepare): the name of the method to prepare
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "PrepareMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.PrepareMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def RunMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.RunMethod_Responses:
        """
        Executes the unobservable command "Run Method"
            Runs the currently prepared method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "RunMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.RunMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def PauseRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.PauseRun_Responses:
        """
        Executes the unobservable command "Pause Run"
            Pauses the currently run method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "PauseRun called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.PauseRun(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def ResumeRun(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.ResumeRun_Responses:
        """
        Executes the unobservable command "Resume Run"
            Resumes method execution
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "ResumeRun called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.ResumeRun(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def StopMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.StopMethod_Responses:
        """
        Executes the unobservable command "Stop Method"
            Stops the method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "StopMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.StopMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def FinishExecution(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.FinishExecution_Responses:
        """
        Executes the unobservable command "Finish Execution"
            Finishes the execution of the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "FinishExecution called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.FinishExecution(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def CloseMethod(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.CloseMethod_Responses:
        """
        Executes the unobservable command "Close Method"
            Closes the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "CloseMethod called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.CloseMethod(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def SetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.SetVariableValue_Responses:
        """
        Executes the unobservable command "Set Variable Value"
            Sets the value of the given variable
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (Variable Name): the name of the variable
            request.Value (Value): the new value of the variable
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "SetVariableValue called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.SetVariableValue(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetVariableNames(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableNames_Responses:
        """
        Executes the unobservable command "Get Variable Names"
            Gets a collection of variable names for the current method
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): A collection of variable names
        """
    
        logging.debug(
            "GetVariableNames called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetVariableNames(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetVariableValue(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetVariableValue_Responses:
        """
        Executes the unobservable command "Get Variable Value"
            Gets the value of the provided variable
    
        :param request: gRPC request containing the parameters passed:
            request.VariableName (Variable Name): the name of the variable
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): the current value of this variable
        """
    
        logging.debug(
            "GetVariableValue called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetVariableValue(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def GetAllRunnableMethods(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.GetAllRunnableMethods_Responses:
        """
        Executes the unobservable command "Get All Runnable Methods"
            Gets a collection of runnable methods
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.ReturnValue (Return Value): a collection of runnable methods
        """
    
        logging.debug(
            "GetAllRunnableMethods called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.GetAllRunnableMethods(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
    
    def Shutdown(self, request, context: grpc.ServicerContext) \
            -> SilaFluentController_pb2.Shutdown_Responses:
        """
        Executes the unobservable command "Shutdown"
            Shuts down FluentControl
    
        :param request: gRPC request containing the parameters passed:
            request.Timeout (Timeout): a timeout in seconds
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        logging.debug(
            "Shutdown called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
    
        try:
            return self.implementation.Shutdown(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    
