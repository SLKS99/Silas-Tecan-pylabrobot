#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: SiLA2_python

*SilaFluentController client*

:details: SilaFluentController:
    This is a python client for Fluent

:file:    SilaFluentController_client.py
:authors: Clemens Klein

:date: (creation)          2020-02-17T13:47:54.201603
:date: (last modification) 2020-02-17T13:47:54.201603

.. note:: Code generated by sila2codegenerator 0.2.0

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .SilaFluentController.gRPC import SilaFluentController_pb2
from .SilaFluentController.gRPC import SilaFluentController_pb2_grpc
# import default arguments for this feature
from .SilaFluentController.SilaFluentController_default_arguments import default_dict as SilaFluentController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class SilaFluentControllerClient(SiLA2Client):
    """
        This is a python client for Fluent

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 name: str = "SilaFluentControllerClient", description: str = "This is a python client for Fluent",
                 server_name: Optional[str] = None,
                 client_uuid: Optional[str] = None,
                 version: str = __version__,
                 vendor_url: str = "tecan.com",
                 server_hostname: str = "localhost", server_ip: str = "127.0.0.1", server_port: int = 50051,
                 cert_file: Optional[str] = None):
        """Class initialiser"""
        super().__init__(
            name=name, description=description,
            server_name=server_name,
            client_uuid=client_uuid,
            version=version,
            vendor_url=vendor_url,
            server_hostname=server_hostname, server_ip=server_ip, server_port=server_port,
            cert_file=cert_file
        )

        logging.info(
            "Starting SiLA2 service client for service SilaFluentController with service name: {server_name}".format(
                server_name=name
            )
        )

        # Create stub objects used to communicate with the server
        self.SilaFluentController_stub = \
            SilaFluentController_pb2_grpc.SilaFluentControllerStub(self.channel)

        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def Get_ImplementedFeatures(self):
        """Get a list of all implemented features."""
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Retrieving the list of implemented features of the server:")
        try:
            response = self.SiLAService_stub.Get_ImplementedFeatures(
                SiLAService_feature_pb2.Get_ImplementedFeatures_Parameters()
            )
            for feature_id in response.ImplementedFeatures:
                logging.debug("Implemented feature: {feature_id}".format(
                    feature_id=feature_id.FeatureIdentifier.value)
                    )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.ImplementedFeatures

    def Get_FeatureDefinition(self, feature_identifier: str) -> Union[str, None]:
        """
        Returns the FDL/XML feature definition of the given feature.

        :param feature_identifier: The name of the feature for which the definition should be returned.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Requesting feature definitions of feature {feature_identifier}:".format(
            feature_identifier=feature_identifier)
        )
        try:
            response = self.SiLAService_stub.GetFeatureDefinition(
                SiLAService_feature_pb2.GetFeatureDefinition_Parameters(
                    QualifiedFeatureIdentifier=SiLAService_feature_pb2.DataType_FeatureIdentifier(
                        FeatureIdentifier=silaFW_pb2.String(value=feature_identifier)
                    )
                )
            )
            logging.debug("Response of GetFeatureDefinition for {feature_identifier} feature: {response}".format(
                response=response,
                feature_identifier=feature_identifier)
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

    def run(self) -> bool:
        """
        Starts the actual client and retrieves the meta-information from the server.

        :returns: True or False whether the connection to the server is established.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        try:
            # Retrieve the basic server information and store it in internal class variables
            #   Display name
            response = self.SiLAService_stub.Get_ServerName(SiLAService_feature_pb2.Get_ServerName_Parameters())
            self.server_display_name = response.ServerName.value
            logging.debug("Display name: {name}".format(name=response.ServerName.value))
            # Server description
            response = self.SiLAService_stub.Get_ServerDescription(
                SiLAService_feature_pb2.Get_ServerDescription_Parameters()
            )
            self.server_description = response.ServerDescription.value
            logging.debug("Description: {description}".format(description=response.ServerDescription.value))
            # Server version
            response = self.SiLAService_stub.Get_ServerVersion(SiLAService_feature_pb2.Get_ServerVersion_Parameters())
            self.server_version = response.ServerVersion.value
            logging.debug("Version: {version}".format(version=response.ServerVersion.value))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return False

        return True

    def stop(self, force: bool = False) -> bool:
        """
        Stop SiLA client routine

        :param force: If set True, the client is supposed to disconnect and stop immediately. Otherwise it can first try
                      to finish what it is doing.

        :returns: Whether the client could be stopped successfully or not.
        """
        # TODO: Implement all routines that have to be executed when the client is stopped.
        #   Feel free to use the "force" parameter to abort any running processes. Or crash your machine. Your call!
        return True

    def AddLabware(self,
                      parameter: SilaFluentController_pb2.AddLabware_Parameters = None) \
            -> SilaFluentController_pb2.AddLabware_Responses:
        """
        Wrapper to call the unobservable command AddLabware on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling AddLabware:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.AddLabware_Parameters(
                    **SilaFluentController_default_dict['AddLabware_Parameters']
                )
    
            response = self.SilaFluentController_stub.AddLabware(parameter)
    
            logging.debug('AddLabware response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def RemoveLabware(self,
                      parameter: SilaFluentController_pb2.RemoveLabware_Parameters = None) \
            -> SilaFluentController_pb2.RemoveLabware_Responses:
        """
        Wrapper to call the unobservable command RemoveLabware on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling RemoveLabware:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.RemoveLabware_Parameters(
                    **SilaFluentController_default_dict['RemoveLabware_Parameters']
                )
    
            response = self.SilaFluentController_stub.RemoveLabware(parameter)
    
            logging.debug('RemoveLabware response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetLocation(self,
                      parameter: SilaFluentController_pb2.SetLocation_Parameters = None) \
            -> SilaFluentController_pb2.SetLocation_Responses:
        """
        Wrapper to call the unobservable command SetLocation on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetLocation:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.SetLocation_Parameters(
                    **SilaFluentController_default_dict['SetLocation_Parameters']
                )
    
            response = self.SilaFluentController_stub.SetLocation(parameter)
    
            logging.debug('SetLocation response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def Subroutine(self,
                      parameter: SilaFluentController_pb2.Subroutine_Parameters = None) \
            -> SilaFluentController_pb2.Subroutine_Responses:
        """
        Wrapper to call the unobservable command Subroutine on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling Subroutine:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.Subroutine_Parameters(
                    **SilaFluentController_default_dict['Subroutine_Parameters']
                )
    
            response = self.SilaFluentController_stub.Subroutine(parameter)
    
            logging.debug('Subroutine response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def TransferLabware(self,
                      parameter: SilaFluentController_pb2.TransferLabware_Parameters = None) \
            -> SilaFluentController_pb2.TransferLabware_Responses:
        """
        Wrapper to call the unobservable command TransferLabware on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling TransferLabware:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.TransferLabware_Parameters(
                    **SilaFluentController_default_dict['TransferLabware_Parameters']
                )
    
            response = self.SilaFluentController_stub.TransferLabware(parameter)
    
            logging.debug('TransferLabware response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def TransferLabwareBackToBase(self,
                      parameter: SilaFluentController_pb2.TransferLabwareBackToBase_Parameters = None) \
            -> SilaFluentController_pb2.TransferLabwareBackToBase_Responses:
        """
        Wrapper to call the unobservable command TransferLabwareBackToBase on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling TransferLabwareBackToBase:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.TransferLabwareBackToBase_Parameters(
                    **SilaFluentController_default_dict['TransferLabwareBackToBase_Parameters']
                )
    
            response = self.SilaFluentController_stub.TransferLabwareBackToBase(parameter)
    
            logging.debug('TransferLabwareBackToBase response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GenericCommand(self,
                      parameter: SilaFluentController_pb2.GenericCommand_Parameters = None) \
            -> SilaFluentController_pb2.GenericCommand_Responses:
        """
        Wrapper to call the unobservable command GenericCommand on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GenericCommand:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GenericCommand_Parameters(
                    **SilaFluentController_default_dict['GenericCommand_Parameters']
                )
    
            response = self.SilaFluentController_stub.GenericCommand(parameter)
    
            logging.debug('GenericCommand response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GetFingers(self,
                      parameter: SilaFluentController_pb2.GetFingers_Parameters = None) \
            -> SilaFluentController_pb2.GetFingers_Responses:
        """
        Wrapper to call the unobservable command GetFingers on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GetFingers:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GetFingers_Parameters(
                    **SilaFluentController_default_dict['GetFingers_Parameters']
                )
    
            response = self.SilaFluentController_stub.GetFingers(parameter)
    
            logging.debug('GetFingers response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DropFingers(self,
                      parameter: SilaFluentController_pb2.DropFingers_Parameters = None) \
            -> SilaFluentController_pb2.DropFingers_Responses:
        """
        Wrapper to call the unobservable command DropFingers on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling DropFingers:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.DropFingers_Parameters(
                    **SilaFluentController_default_dict['DropFingers_Parameters']
                )
    
            response = self.SilaFluentController_stub.DropFingers(parameter)
    
            logging.debug('DropFingers response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def UserPrompt(self,
                      parameter: SilaFluentController_pb2.UserPrompt_Parameters = None) \
            -> SilaFluentController_pb2.UserPrompt_Responses:
        """
        Wrapper to call the unobservable command UserPrompt on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling UserPrompt:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.UserPrompt_Parameters(
                    **SilaFluentController_default_dict['UserPrompt_Parameters']
                )
    
            response = self.SilaFluentController_stub.UserPrompt(parameter)
    
            logging.debug('UserPrompt response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GetTips(self,
                      parameter: SilaFluentController_pb2.GetTips_Parameters = None) \
            -> SilaFluentController_pb2.GetTips_Responses:
        """
        Wrapper to call the unobservable command GetTips on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GetTips:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GetTips_Parameters(
                    **SilaFluentController_default_dict['GetTips_Parameters']
                )
    
            response = self.SilaFluentController_stub.GetTips(parameter)
    
            logging.debug('GetTips response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def Aspirate(self,
                      parameter: SilaFluentController_pb2.Aspirate_Parameters = None) \
            -> SilaFluentController_pb2.Aspirate_Responses:
        """
        Wrapper to call the unobservable command Aspirate on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling Aspirate:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.Aspirate_Parameters(
                    **SilaFluentController_default_dict['Aspirate_Parameters']
                )
    
            response = self.SilaFluentController_stub.Aspirate(parameter)
    
            logging.debug('Aspirate response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def Dispense(self,
                      parameter: SilaFluentController_pb2.Dispense_Parameters = None) \
            -> SilaFluentController_pb2.Dispense_Responses:
        """
        Wrapper to call the unobservable command Dispense on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling Dispense:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.Dispense_Parameters(
                    **SilaFluentController_default_dict['Dispense_Parameters']
                )
    
            response = self.SilaFluentController_stub.Dispense(parameter)
    
            logging.debug('Dispense response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def DropTips(self,
                      parameter: SilaFluentController_pb2.DropTips_Parameters = None) \
            -> SilaFluentController_pb2.DropTips_Responses:
        """
        Wrapper to call the unobservable command DropTips on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling DropTips:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.DropTips_Parameters(
                    **SilaFluentController_default_dict['DropTips_Parameters']
                )
    
            response = self.SilaFluentController_stub.DropTips(parameter)
    
            logging.debug('DropTips response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def StartFluentOrAttach(self,
                      parameter: SilaFluentController_pb2.StartFluentOrAttach_Parameters = None) \
            -> SilaFluentController_pb2.StartFluentOrAttach_Responses:
        """
        Wrapper to call the unobservable command StartFluentOrAttach on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling StartFluentOrAttach:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.StartFluentOrAttach_Parameters(
                    **SilaFluentController_default_dict['StartFluentOrAttach_Parameters']
                )
    
            response = self.SilaFluentController_stub.StartFluentOrAttach(parameter)
    
            logging.debug('StartFluentOrAttach response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def StartFluentAndLogin(self,
                      parameter: SilaFluentController_pb2.StartFluentAndLogin_Parameters = None) \
            -> SilaFluentController_pb2.StartFluentAndLogin_Responses:
        """
        Wrapper to call the unobservable command StartFluentAndLogin on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling StartFluentAndLogin:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.StartFluentAndLogin_Parameters(
                    **SilaFluentController_default_dict['StartFluentAndLogin_Parameters']
                )
    
            response = self.SilaFluentController_stub.StartFluentAndLogin(parameter)
    
            logging.debug('StartFluentAndLogin response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def StartFluentInSimulationMode(self,
                      parameter: SilaFluentController_pb2.StartFluentInSimulationMode_Parameters = None) \
            -> SilaFluentController_pb2.StartFluentInSimulationMode_Responses:
        """
        Wrapper to call the unobservable command StartFluentInSimulationMode on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling StartFluentInSimulationMode:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.StartFluentInSimulationMode_Parameters(
                    **SilaFluentController_default_dict['StartFluentInSimulationMode_Parameters']
                )
    
            response = self.SilaFluentController_stub.StartFluentInSimulationMode(parameter)
    
            logging.debug('StartFluentInSimulationMode response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def PrepareMethod(self,
                      parameter: SilaFluentController_pb2.PrepareMethod_Parameters = None, metadata = None) \
            -> SilaFluentController_pb2.PrepareMethod_Responses:
        """
        Wrapper to call the unobservable command PrepareMethod on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling PrepareMethod:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.PrepareMethod_Parameters(
                    **SilaFluentController_default_dict['PrepareMethod_Parameters']
                )
    
            response = self.SilaFluentController_stub.PrepareMethod(parameter, metadata=metadata)
    
            logging.debug('PrepareMethod response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def RunMethod(self,
                      parameter: SilaFluentController_pb2.RunMethod_Parameters = None) \
            -> SilaFluentController_pb2.RunMethod_Responses:
        """
        Wrapper to call the unobservable command RunMethod on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling RunMethod:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.RunMethod_Parameters(
                    **SilaFluentController_default_dict['RunMethod_Parameters']
                )
    
            response = self.SilaFluentController_stub.RunMethod(parameter)
    
            logging.debug('RunMethod response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def PauseRun(self,
                      parameter: SilaFluentController_pb2.PauseRun_Parameters = None) \
            -> SilaFluentController_pb2.PauseRun_Responses:
        """
        Wrapper to call the unobservable command PauseRun on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling PauseRun:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.PauseRun_Parameters(
                    **SilaFluentController_default_dict['PauseRun_Parameters']
                )
    
            response = self.SilaFluentController_stub.PauseRun(parameter)
    
            logging.debug('PauseRun response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def ResumeRun(self,
                      parameter: SilaFluentController_pb2.ResumeRun_Parameters = None) \
            -> SilaFluentController_pb2.ResumeRun_Responses:
        """
        Wrapper to call the unobservable command ResumeRun on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling ResumeRun:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.ResumeRun_Parameters(
                    **SilaFluentController_default_dict['ResumeRun_Parameters']
                )
    
            response = self.SilaFluentController_stub.ResumeRun(parameter)
    
            logging.debug('ResumeRun response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def StopMethod(self,
                      parameter: SilaFluentController_pb2.StopMethod_Parameters = None) \
            -> SilaFluentController_pb2.StopMethod_Responses:
        """
        Wrapper to call the unobservable command StopMethod on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling StopMethod:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.StopMethod_Parameters(
                    **SilaFluentController_default_dict['StopMethod_Parameters']
                )
    
            response = self.SilaFluentController_stub.StopMethod(parameter)
    
            logging.debug('StopMethod response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def FinishExecution(self,
                      parameter: SilaFluentController_pb2.FinishExecution_Parameters = None) \
            -> SilaFluentController_pb2.FinishExecution_Responses:
        """
        Wrapper to call the unobservable command FinishExecution on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling FinishExecution:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.FinishExecution_Parameters(
                    **SilaFluentController_default_dict['FinishExecution_Parameters']
                )
    
            response = self.SilaFluentController_stub.FinishExecution(parameter)
    
            logging.debug('FinishExecution response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def CloseMethod(self,
                      parameter: SilaFluentController_pb2.CloseMethod_Parameters = None) \
            -> SilaFluentController_pb2.CloseMethod_Responses:
        """
        Wrapper to call the unobservable command CloseMethod on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling CloseMethod:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.CloseMethod_Parameters(
                    **SilaFluentController_default_dict['CloseMethod_Parameters']
                )
    
            response = self.SilaFluentController_stub.CloseMethod(parameter)
    
            logging.debug('CloseMethod response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def SetVariableValue(self,
                      parameter: SilaFluentController_pb2.SetVariableValue_Parameters = None) \
            -> SilaFluentController_pb2.SetVariableValue_Responses:
        """
        Wrapper to call the unobservable command SetVariableValue on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling SetVariableValue:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.SetVariableValue_Parameters(
                    **SilaFluentController_default_dict['SetVariableValue_Parameters']
                )
    
            response = self.SilaFluentController_stub.SetVariableValue(parameter)
    
            logging.debug('SetVariableValue response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GetVariableNames(self,
                      parameter: SilaFluentController_pb2.GetVariableNames_Parameters = None) \
            -> SilaFluentController_pb2.GetVariableNames_Responses:
        """
        Wrapper to call the unobservable command GetVariableNames on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GetVariableNames:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GetVariableNames_Parameters(
                    **SilaFluentController_default_dict['GetVariableNames_Parameters']
                )
    
            response = self.SilaFluentController_stub.GetVariableNames(parameter)
    
            logging.debug('GetVariableNames response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GetVariableValue(self,
                      parameter: SilaFluentController_pb2.GetVariableValue_Parameters = None) \
            -> SilaFluentController_pb2.GetVariableValue_Responses:
        """
        Wrapper to call the unobservable command GetVariableValue on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GetVariableValue:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GetVariableValue_Parameters(
                    **SilaFluentController_default_dict['GetVariableValue_Parameters']
                )
    
            response = self.SilaFluentController_stub.GetVariableValue(parameter)
    
            logging.debug('GetVariableValue response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def GetAllRunnableMethods(self,
                      parameter: SilaFluentController_pb2.GetAllRunnableMethods_Parameters = None) \
            -> SilaFluentController_pb2.GetAllRunnableMethods_Responses:
        """
        Wrapper to call the unobservable command GetAllRunnableMethods on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling GetAllRunnableMethods:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.GetAllRunnableMethods_Parameters(
                    **SilaFluentController_default_dict['GetAllRunnableMethods_Parameters']
                )
    
            response = self.SilaFluentController_stub.GetAllRunnableMethods(parameter)
    
            logging.debug('GetAllRunnableMethods response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    
    def Shutdown(self,
                      parameter: SilaFluentController_pb2.Shutdown_Parameters = None) \
            -> SilaFluentController_pb2.Shutdown_Responses:
        """
        Wrapper to call the unobservable command Shutdown on the server.
    
        :param parameter: The parameter gRPC construct required for this command.
    
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call
    
        logging.debug("Calling Shutdown:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = SilaFluentController_pb2.Shutdown_Parameters(
                    **SilaFluentController_default_dict['Shutdown_Parameters']
                )
    
            response = self.SilaFluentController_stub.Shutdown(parameter)
    
            logging.debug('Shutdown response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None
    
        return response
    

    #   No properties defined

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        # Access more details using the return value fields
        # grpc_error.message
        # grpc_error.error_type


def parse_command_line():
    """
    Just looking for command line arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 client: SilaFluentController")
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    return parser.parse_args()


if __name__ == '__main__':
    # or use logging.INFO (=20) or logging.ERROR (=30) for less output
    logging.basicConfig(format='%(levelname)-8s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)

    parsed_args = parse_command_line()

    # start the server
    sila_client = SilaFluentControllerClient(server_ip='127.0.0.1', server_port=50051)
    sila_client.run()

    # Log connection info
    logging.info(
        (
            'Connected to SiLA Server {display_name} running in version {version}.' '\n'
            'Service description: {service_description}'
        ).format(
            display_name=sila_client.server_display_name,
            version=sila_client.server_version,
            service_description=sila_client.server_description
        )
    )

    # TODO:
    #   Write your further function calls here to run the client as a standalone application.
